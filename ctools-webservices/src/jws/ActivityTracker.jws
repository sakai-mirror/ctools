/**
  * ActivityTracker.jws
  * @author Noah Botimer (botimer@umich.edu)
  *
  * 2007-10-08
  */

//import net.sf.json.*;
//JSON-lib may be used in the future to courier application data

import java.util.List;
import java.util.Iterator;

import org.sakaiproject.tool.api.Session;
import org.sakaiproject.tool.cover.SessionManager;
import org.sakaiproject.component.cover.ServerConfigurationService;

import org.sakaiproject.user.api.User;
import org.sakaiproject.user.cover.UserDirectoryService;

import org.sakaiproject.assignment.api.Assignment;
import org.sakaiproject.assignment.api.AssignmentSubmission;
import org.sakaiproject.assignment.cover.AssignmentService;

import org.apache.axis.AxisFault;

import java.io.*;

import java.security.*;
import java.security.spec.*;
import java.security.interfaces.*;

import javax.crypto.*;
import javax.crypto.spec.*;
import javax.crypto.interfaces.*;


public class ActivityTracker {
  private static SecretKey privateKey;

  //establishSession is lifted from SakaiScript
  private Session establishSession(String id) throws AxisFault 
  {
    Session s = SessionManager.getSession(decryptSession(id));

    if (s == null)
    {
      throw new AxisFault("Session "+id+" is not active");
    }
    s.setActive();
    SessionManager.setCurrentSession(s);
    return s;
  }

  public String isAssignmentCompleted(String sessionid, String actRef) throws AxisFault {
    try {
      Session s = establishSession(sessionid);
      User user = UserDirectoryService.getUser(s.getUserId());
      AssignmentSubmission sub = AssignmentService.getSubmission(actRef, user);
      return (sub == null) ? "Not Started" : sub.getStatus();
    }
    catch (Exception e) {
      StringWriter sw = new StringWriter();
      e.printStackTrace(new PrintWriter(sw));
      return sw.toString();
    }
  }

  //decryptSession() and the other cryptography methods are from Link Tool's SakaiSigning
  public String decryptSession(String esession) throws AxisFault 
  {
    return decrypt(esession.trim());
  }

  private static String decrypt (String enc) {
    if (privateKey == null)
      privateKey = readSecretKey("privkey", "Blowfish");

    try {
      Cipher dcipher = Cipher.getInstance("Blowfish");
      dcipher.init(Cipher.DECRYPT_MODE, privateKey);
      byte[] dec = hex2byte(enc);
      // Decrypt
      byte[] utf8 = dcipher.doFinal(dec);
      // Decode using utf-8
      return new String(utf8, "UTF8");
    } catch (Exception ignore) {
      System.out.println("SakaiSigning decrypt failed");
    }
    return null;
  }

  private static SecretKey readSecretKey(String name, String alg) {
    try {
      String homedir = ServerConfigurationService.getSakaiHomePath();
      if (homedir == null)
        homedir = "/etc/";
      String filename = homedir + "sakai.rutgers.linktool." + name;
      FileInputStream file = new FileInputStream(filename);
      byte[] bytes = new byte[file.available()];
      file.read(bytes);
      file.close();
      SecretKey privkey = new SecretKeySpec(bytes, alg);
      return privkey;
    } catch (Exception ignore) {
      return null;
    }
  }

  public static byte[] hex2byte(String strhex) {
    // System.out.println("hex2byte " + strhex); 

    if(strhex==null) return null;
    int l = strhex.length();

    if(l %2 ==1) return null;
    byte[] b = new byte[l/2];
    for(int i = 0 ; i < l/2 ;i++){
      b[i] = (byte)Integer.parseInt(strhex.substring(i *2,i*2 +2),16);
    }
    return b;
  }

}

