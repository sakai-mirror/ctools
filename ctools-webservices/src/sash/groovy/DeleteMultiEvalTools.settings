// $HeadURL: https://source.sakaiproject.org/svn/ctools/trunk/ctools-webservices/src/sash/groovy/UpdateSiteWithTool_V2.groovy $
// $Id: UpdateSiteWithTool_V2.groovy 51751 2008-09-03 15:59:50Z dlhaines@umich.edu $

// This will control a run of the script to remove pages from my workspace which
// have multiple evalutation tools.

static class RunSettings {


  // control tracing
  static def verbose = 1;

  /****************** Important variables, likely to be adjusted *************/

  // what kind of processing to do.
  //  static String cmd = 'count';
  static String cmd = 'process';

  // maximum number of sites to retrieve in a single query.
  // It should be fairly large for production.
  static def maxBatchSize = 1000;

  // Limit on the number of batches of sites to process.  This is useful
  // mostly for dry run testing, where the query will return the same sites over
  // and over again as they are not updated.
  static def maxBatches = 5;

  // starting hour and minute
  static def startHour = 13
    static def startMin = 05;
  //def startDay = Calendar.WEDNESDAY;
  //  static def startDay = Calendar.THURSDAY;
  static def startDay = Calendar.FRIDAY;

  // limit the number of times will check in the wait routine. 
  // This prevents waiting forever, but means the job will start regardless when the 
  // startCnt expires.
  // This will cover more than 3 days with a 10 minute wait between checks.
  static def startCnt = 500;  

  // how long to sleep between time checks;
  static def sleepSeconds = 5 * 60;

  //  Do / don't actually do the update.
  //static Boolean dryRun = true;
  static Boolean dryRun = false;

  // Define the tool to be added along with the desired page name and tool name.
  static def evalNames = ['toolRegistration':'sakai.rsf.evaluation', 'newPageName':"Teaching Questionnaires", 'toolName': "Teaching Questionnaires"];
  static def wikiNames = ['toolRegistration':'sakai.rwiki', 'newPageName':'Wiki Tool page', 'toolName': 'Wiki Tool'];
  static def dropboxNames = ['toolRegistration':'sakai.dropbox', 'newPageName':'dropbox', 'toolName': 'dropbox'];
  static def pollNames = ['toolRegistration':'sakai.poll', 'newPageName':'Poll Page(added by script)', 'toolName': 'Poll tool (added by script)'];
  static def discussionNames = ['toolRegistration':'sakai.discussion', 'newPageName':'Discussion Page(added by script)', 'toolName': 'Discussion tool (added by script)'];

  // Specify which tool configuration infomation to use.
  static def toolDef = evalNames;

  // Per John Leasia, ignore these sites.
  static def ignoreSites = [  '~admin','!user','!user.friend','!user.guest','!user.uniqname','!user.liteguest','~'];

  // Sql to return a list of candidate site / pages to be updated. (This is not a final list since some might be returned
  // that will be excluded based on list of exception sites.)

  static def candidateDupToolSitePageSql = "select SITE_ID, PAGE_ID from (select SITE_ID,PAGE_ID from SAKAI_SITE_TOOL where PAGE_ID in (select DISTINCT PAGE_ID from SAKAI_SITE_TOOL where SITE_ID like '~%' and REGISTRATION = '${RunSettings.toolDef.toolRegistration}' group by PAGE_ID HAVING count(*) > 1) group by SITE_ID, PAGE_ID) where rownum <= ${RunSettings.maxBatchSize}";

  // Sql to count the total number of candidate sites.

  static def countDupToolSitesSql = "select count(*) from (select SITE_ID,PAGE_ID from SAKAI_SITE_TOOL where PAGE_ID in (select DISTINCT PAGE_ID from SAKAI_SITE_TOOL where SITE_ID like '~%' and REGISTRATION = '${RunSettings.toolDef.toolRegistration}' group by PAGE_ID HAVING count(*) > 1) group by SITE_ID, PAGE_ID)";
}
