Index: site/site-impl/impl/src/java/org/sakaiproject/site/impl/SiteCacheImpl.java
===================================================================
--- site/site-impl/impl/src/java/org/sakaiproject/site/impl/SiteCacheImpl.java	(revision 12711)
+++ site/site-impl/impl/src/java/org/sakaiproject/site/impl/SiteCacheImpl.java	(revision 12713)
@@ -25,6 +25,7 @@
 import java.util.Map;
 
 import org.sakaiproject.memory.api.Cache;
+import org.sakaiproject.memory.api.DerivedCache;
 import org.sakaiproject.memory.api.MemoryService;
 import org.sakaiproject.site.api.Group;
 import org.sakaiproject.site.api.Site;
@@ -38,7 +39,7 @@
  * SiteCacheImpl is a cache tuned for Site (and page / tool) access.
  * </p>
  */
-public class SiteCacheImpl
+public class SiteCacheImpl implements DerivedCache
 {
 	/** Map of a tool id to a cached site's tool configuration instance. */
 	protected Map m_tools = new ConcurrentReaderHashMap();
@@ -63,6 +64,9 @@
 	public SiteCacheImpl(MemoryService memoryService, long sleep, String pattern)
 	{
 		m_cache = memoryService.newHardCache(sleep, pattern);
+
+		// setup as the derived cache
+		m_cache.attachDerivedCache(this);
 	}
 
 	/**
@@ -77,37 +81,7 @@
 	 */
 	public void put(Object key, Object payload, int duration)
 	{
-		if (m_cache.disabled()) return;
-
 		m_cache.put(key, payload, duration);
-
-		// add the payload (Site) tool ids
-		if (payload instanceof Site)
-		{
-			Site site = (Site) payload;
-
-			// get the pages and tools, groups and propeties all loaded efficiently
-			site.loadAll();
-
-			// add the pages and tools to the cache
-			for (Iterator pages = site.getPages().iterator(); pages.hasNext();)
-			{
-				SitePage page = (SitePage) pages.next();
-				m_pages.put(page.getId(), page);
-				for (Iterator tools = page.getTools().iterator(); tools.hasNext();)
-				{
-					ToolConfiguration tool = (ToolConfiguration) tools.next();
-					m_tools.put(tool.getId(), tool);
-				}
-			}
-
-			// add the groups to the cache
-			for (Iterator groups = site.getGroups().iterator(); groups.hasNext();)
-			{
-				Group group = (Group) groups.next();
-				m_groups.put(group.getId(), group);
-			}
-		}
 	}
 
 	/**
@@ -140,15 +114,6 @@
 	public void clear()
 	{
 		m_cache.clear();
-
-		// clear the tool ids
-		m_tools.clear();
-
-		// clear the pages
-		m_pages.clear();
-
-		// clear the groups
-		m_groups.clear();
 	}
 
 	/**
@@ -159,34 +124,7 @@
 	 */
 	public void remove(Object key)
 	{
-		if (m_cache.disabled()) return;
-
-		// get the current payload, if any
-		Object payload = m_cache.getExpiredOrNot(key);
-
 		m_cache.remove(key);
-
-		// clear the tool ids for this site
-		if ((payload != null) && (payload instanceof Site))
-		{
-			Site site = (Site) payload;
-			for (Iterator pages = site.getPages().iterator(); pages.hasNext();)
-			{
-				SitePage page = (SitePage) pages.next();
-				m_pages.remove(page.getId());
-				for (Iterator tools = page.getTools().iterator(); tools.hasNext();)
-				{
-					ToolConfiguration tool = (ToolConfiguration) tools.next();
-					m_tools.remove(tool.getId());
-				}
-			}
-
-			for (Iterator groups = site.getGroups().iterator(); groups.hasNext();)
-			{
-				Group group = (Group) groups.next();
-				m_groups.remove(group.getId());
-			}
-		}
 	}
 
 	/**
@@ -224,4 +162,81 @@
 	{
 		return (Group) m_groups.get(groupId);
 	}
+
+	/**
+	 * {@inheritDoc}
+	 */
+	public void notifyCacheClear()
+	{
+		// clear the tool ids
+		m_tools.clear();
+
+		// clear the pages
+		m_pages.clear();
+
+		// clear the groups
+		m_groups.clear();
+	}
+
+	/**
+	 * {@inheritDoc}
+	 */
+	public void notifyCachePut(Object key, Object payload)
+	{
+		// add the payload (Site) tool ids
+		if (payload instanceof Site)
+		{
+			Site site = (Site) payload;
+
+			// get the pages and tools, groups and propeties all loaded efficiently
+			site.loadAll();
+
+			// add the pages and tools to the cache
+			for (Iterator pages = site.getPages().iterator(); pages.hasNext();)
+			{
+				SitePage page = (SitePage) pages.next();
+				m_pages.put(page.getId(), page);
+				for (Iterator tools = page.getTools().iterator(); tools.hasNext();)
+				{
+					ToolConfiguration tool = (ToolConfiguration) tools.next();
+					m_tools.put(tool.getId(), tool);
+				}
+			}
+
+			// add the groups to the cache
+			for (Iterator groups = site.getGroups().iterator(); groups.hasNext();)
+			{
+				Group group = (Group) groups.next();
+				m_groups.put(group.getId(), group);
+			}
+		}		
+	}
+
+	/**
+	 * {@inheritDoc}
+	 */
+	public void notifyCacheRemove(Object key, Object payload)
+	{
+		// clear the tool ids for this site
+		if ((payload != null) && (payload instanceof Site))
+		{
+			Site site = (Site) payload;
+			for (Iterator pages = site.getPages().iterator(); pages.hasNext();)
+			{
+				SitePage page = (SitePage) pages.next();
+				m_pages.remove(page.getId());
+				for (Iterator tools = page.getTools().iterator(); tools.hasNext();)
+				{
+					ToolConfiguration tool = (ToolConfiguration) tools.next();
+					m_tools.remove(tool.getId());
+				}
+			}
+
+			for (Iterator groups = site.getGroups().iterator(); groups.hasNext();)
+			{
+				Group group = (Group) groups.next();
+				m_groups.remove(group.getId());
+			}
+		}
+	}
 }
Index: memory/memory-api/api/src/java/org/sakaiproject/memory/api/Cache.java
===================================================================
--- memory/memory-api/api/src/java/org/sakaiproject/memory/api/Cache.java	(revision 12711)
+++ memory/memory-api/api/src/java/org/sakaiproject/memory/api/Cache.java	(revision 12713)
@@ -204,4 +204,12 @@
 	 * Clear all entries and shudown the cache. Don't use after this call.
 	 */
 	void destroy();
+	
+	/**
+	 * Attach this DerivedCache to the cache. The DerivedCache is then notified of the cache contents changing events.
+	 * 
+	 * @param cache
+	 *        The DerivedCache to attach.
+	 */
+	void attachDerivedCache(DerivedCache cache);
 }
Index: memory/memory-api/api/src/java/org/sakaiproject/memory/api/DerivedCache.java
===================================================================
--- memory/memory-api/api/src/java/org/sakaiproject/memory/api/DerivedCache.java	(revision 0)
+++ memory/memory-api/api/src/java/org/sakaiproject/memory/api/DerivedCache.java	(revision 12713)
@@ -0,0 +1,55 @@
+/**********************************************************************************
+ * $URL$
+ * $Id$
+ ***********************************************************************************
+ *
+ * Copyright (c) 2006 The Sakai Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License"); 
+ * you may not use this file except in compliance with the License. 
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software 
+ * distributed under the License is distributed on an "AS IS" BASIS, 
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+ * See the License for the specific language governing permissions and 
+ * limitations under the License.
+ *
+ **********************************************************************************/
+
+package org.sakaiproject.memory.api;
+
+/**
+ * <p>
+ * A DerivedCache provides some additional caching derived from the primary data in a Cache. It is directly accessed by the client for this derived data. It is notified by the primary cache it is attached to when the cache contents change.
+ * </p>
+ */
+public interface DerivedCache
+{
+	/**
+	 * Notification that an object has been put into the primary cache.
+	 * 
+	 * @param key
+	 *        The cache key.
+	 * @param payload
+	 *        The cached objed.
+	 */
+	void notifyCachePut(Object key, Object payload);
+
+	/**
+	 * Notification that the primary cache has been cleared of all entries.
+	 */
+	void notifyCacheClear();
+
+	/**
+	 * Notification that this object under this key has been removed from the cache.
+	 * 
+	 * @param key
+	 *        The cache key.
+	 * @param payload
+	 *        The cached objed.
+	 */
+	void notifyCacheRemove(Object key, Object payload);
+}

Property changes on: memory/memory-api/api/src/java/org/sakaiproject/memory/api/DerivedCache.java
___________________________________________________________________
Name: svn:eol-style
   + native
Name: svn:keywords
   + Date Revision Author HeadURL Id

Index: memory/memory-impl/impl/src/java/org/sakaiproject/memory/impl/MemCache.java
===================================================================
--- memory/memory-impl/impl/src/java/org/sakaiproject/memory/impl/MemCache.java	(revision 12711)
+++ memory/memory-impl/impl/src/java/org/sakaiproject/memory/impl/MemCache.java	(revision 12713)
@@ -38,6 +38,7 @@
 import org.sakaiproject.event.api.EventTrackingService;
 import org.sakaiproject.memory.api.Cache;
 import org.sakaiproject.memory.api.CacheRefresher;
+import org.sakaiproject.memory.api.DerivedCache;
 
 import EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap;
 
@@ -99,6 +100,9 @@
 	/** Count of things put into the cache. */
 	protected long m_putCount = 0;
 
+	/** My (optional) DerivedCache. */
+	protected DerivedCache m_derivedCache = null;
+
 	/**
 	 * The cache entry. Holds a time stamped payload.
 	 */
@@ -145,6 +149,15 @@
 		} // CacheEntry
 
 		/**
+		 * Access the hard payload directly.
+		 * @return The hard payload.
+		 */
+		public Object getHardPayload()
+		{
+			return m_hardPayload;
+		}
+
+		/**
 		 * Get the cached object.
 		 * 
 		 * @param key
@@ -334,6 +347,29 @@
 	}
 
 	/**
+	 * {@inheritDoc}
+	 */
+	public void attachDerivedCache(DerivedCache cache)
+	{
+		// Note: only one is supported
+		if (cache == null)
+		{
+			m_derivedCache = null;
+		}
+		else
+		{
+			if (m_derivedCache != null)
+			{
+				M_log.warn("attachDerivedCache - already got one!");
+			}
+			else
+			{
+				m_derivedCache = cache;
+			}
+		}
+	}
+
+	/**
 	 * Cache an object
 	 * 
 	 * @param key
@@ -350,6 +386,8 @@
 		m_map.put(key, new CacheEntry(payload, duration));
 
 		m_putCount++;
+
+		if (m_derivedCache != null) m_derivedCache.notifyCachePut(key, payload);
 	}
 
 	/**
@@ -615,6 +653,8 @@
 		m_hitCount = 0;
 		m_putCount = 0;
 
+		if (m_derivedCache != null) m_derivedCache.notifyCacheClear();
+
 	} // clear
 
 	/**
@@ -627,8 +667,19 @@
 	{
 		if (disabled()) return;
 
-		m_map.remove(key);
+		CacheEntry entry = (CacheEntry) m_map.remove(key);
+		
+		if (m_derivedCache != null)
+		{
+			Object old = null;
+			if (entry != null)
+			{
+				old = entry.getHardPayload();
+			}
 
+			m_derivedCache.notifyCacheRemove(key, old);
+		}
+
 	} // remove
 
 	/**
