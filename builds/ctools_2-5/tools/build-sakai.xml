<project name="build-sakai" basedir="." default="sakaiBuildInfo" >


  <!--
      # $Id$
      # $HeadURL$
  -->

  <target name="sakaiBuildInfo" >
    <echo>
      This installs and compiles the sakai code.  Targets in this file should not be invoked directly
      but should be called by the master build.xml.

      The default values for the sakai build are given below.  They are usually overridden by a properties file.

      sakai.svndir = ${sakai.svndir}
      sakai.svnurl = ${sakai.svnurl}
      sakai.revision = ${sakai.revision}
    </echo>
  </target>


  <!-- ================================================== -->
  <!--             construct the source                   -->
  <!-- ================================================== -->

  <!-- ================================================== -->
  <!--               deal with Sakai proper               -->
  <!-- ================================================== -->

  <target name="getSakaiSrc" depends="prepareBuildDirs" unless="noclean">
    <echo> Get source via perl script </echo>
    <exec dir="." executable="perl" failonerror="true">
      <arg value="${scripts.dir}/svnCheckoutExternalsFormat.pl" />
      <arg value="${work.dir}/build" />
      <arg value="${logs.dir}/source.log" />
      <arg value="${svnCmd}" />
      <arg value="${user.dir}/${build.externals.file}" />
    </exec>
  </target>

  <target name="getConfigurationSrc"
	  description="update the configuration information (not the executable files)." >
    <echo> update configuration from ${build.configuration.svnurl}/${build.configuration.configdir} revision: ${build.configuration.revision}</echo>
    <!-- force is added since this will checkout over existing files -->
    <execSvnCmd url="${build.configuration.svnurl}/${build.configuration.configdir}" revision="${build.configuration.revision}"
		additionalArguments="--force" />
  </target>

  <!-- remove things that should not be there.  
       For entire tools that should be included for some builds but not others 
       use a separate target so that can have a property as a flag to include the tool or not.
       That allows setting the state of that tools from the properties file and doesn't require 
       seperate build scripts for the different versions.
  -->

  <!-- -->
  <target name="deleteLinktool" if="linktool.install.skip">
    <removeFromBuild deleteDir="linktool" />
  </target>
  <!-- -->

  <target name="deleteBlog" if="blog.install.skip">
    <removeFromBuild deleteDir="blog" />
  </target>

  <target name="deleteWebservices" if="webservices.install.skip">
    <removeFromBuild deleteDir="webservices" />
  </target>

  <target name="removeUnneededSakai" depends="deleteSamigo,deleteLinktool,deleteBlog,deleteWebservices" >

    <!--
    <removeFromBuild deleteDir="portal/mercury" />
    <removeFromBuild deleteDir="common/common-composite-component/src/test" />
    <removeFromBuild deleteDir="edu/coursemanagement-tool/src/test" />
    <removeFromBuild deleteDir="gradebook/sample-course-grade-converter" />
    <removeFromBuild deleteDir="gradebook/testservice-tool" />
    <removeFromBuild deleteDir="metaobj/api-impl/src/test" />
    <removeFromBuild deleteDir="osid/osid-unit-test" />
    <removeFromBuild deleteDir="rwiki/jrcs/src/completetest" />
    <removeFromBuild deleteDir="rwiki/jrcs/src/test" />
    <removeFromBuild deleteDir="rwiki/radeox/src/test" />
    <removeFromBuild deleteDir="rwiki/rwiki/src/test" />
    <removeFromBuild deleteDir="rwiki/rwiki/src/testBundle" />
    <removeFromBuild deleteDir="sam/testdata" />
    <removeFromBuild deleteDir="sam/tests" />
    <removeFromBuild deleteDir="sam/tool/src/java/test" />

    <!\-\- currently looks like only need to have CTools providers so get 
	 rid of course-management and provided providers. \-\->
    <removeFromBuild deleteDir="providers" /> 
    <removeFromBuild deleteDir="course-management/cm-impl" />
    <!\-\- 
	 many now have multiple providers, so need to pick and choose, not just
	 replace with ctools ones.
    \-\->

    <removeFromBuild deleteDir="wsrp" />
    <removeFromBuild deleteDir="warehouse" />
    <removeFromBuild deleteDir="reports/api-impl" />
    <removeFromBuild deleteDir="reports/components" />
    <removeFromBuild deleteDir="reports/tool" />
    -->
  </target>

  <!--
      <target name="removeUnneededSakai" >

<removeFromBuild deleteDir="portal/mercury" />
<removeFromBuild deleteDir="common/common-composite-component/src/test" />
<removeFromBuild deleteDir="edu/coursemanagement-tool/src/test" />
<removeFromBuild deleteDir="gradebook/testservice" />
<removeFromBuild deleteDir="metaobj/api-impl/src/test" />
<removeFromBuild deleteDir="osid/osid-unit-test" />
<removeFromBuild deleteDir="rwiki/jrcs/src/completetest" />
<removeFromBuild deleteDir="rwiki/jrcs/src/test" />
<removeFromBuild deleteDir="rwiki/radeox/src/test" />
<removeFromBuild deleteDir="rwiki/rwiki/src/test" />
<removeFromBuild deleteDir="rwiki/rwiki/src/testBundle" />
<removeFromBuild deleteDir="sam/testdata" />
<removeFromBuild deleteDir="sam/tests" />
<removeFromBuild deleteDir="sam/tool/src/java/test" />
<removeFromBuild deleteDir="providers" />
<removeFromBuild deleteDir="wsrp" />
<removeFromBuild deleteDir="warehouse" />
<removeFromBuild deleteDir="reports/api-impl" />
<removeFromBuild deleteDir="reports/components" />
<removeFromBuild deleteDir="reports/tool" />
<removeFromBuild deleteDir="webservices" />

</target>
  -->

  <target name="editSakai" >
  </target>

  <target name="removeSamigo" if="remove.samigo">
  </target>

  <target name="handleTomcatWebXml" if="tomcatWebXml.name" >
    <mkdir dir="${image.dir}/conf" />
    <copy overwrite="true" tofile="${image.dir}/conf/web.xml">
      <fileset file="${reference.dir}/${tomcatWebXml.name}" />
    </copy>
  </target>

  <target name="handleTinyMce" if="tiny_mce.name.dest" >
    <mkdir dir="${image.dir}/webapps" />
    <get src="${tiny_mce.path}/${tiny_mce.name.src}" dest="${image.dir}/webapps/${tiny_mce.name.dest}" />
  </target>

  <target name="imageSakai" depends="handleTomcatWebXml,handleTinyMce" > 

    <removeWarFromImage deleteWar="sakai-comp-test-app1.war" />
    <removeWarFromImage deleteWar="sakai-group-test.war" />
    <removeWarFromImage deleteWar="sakai-osid-repo-test.war" />
    <removeWarFromImage deleteWar="sakai-sections-testservice.war" />
    <removeWarFromImage deleteWar="sakai-jsf-example.war" />
    <removeWarFromImage deleteWar="sakai-sample-tools-browser.war" />
    <removeWarFromImage deleteWar="sakai-sample-tools-jsf1.war" />
    <removeWarFromImage deleteWar="sakai-sample-tools-qa-helper.war" />
    <removeWarFromImage deleteWar="sakai-wsrp-producer.war" />

  </target>

  <!-- changes to use maven2 -->
  <!-- 
       change name of maven executible 
       take out -b
       add -e to get error dump
       default to online build.
  -->
  
  <property name="maven_name" value="mvn" />

  <target name="compileSakai.clean" unless="noclean">
    <exec executable="${maven_name}"
	dir="${build.dir}/ctools-build"
	  failonerror="true"
	  searchpath="true"
	  >
      <env key="MAVEN_OPTS" value="-Djava.net.preferIPv4Stack=true -Xmx768m" />

      <!-- use this profile -->
      <!-- <arg value="-P ctools" /> --> <!-- does a build with new ctools profile -->
      <!-- <arg value="-P pack-demo" /> --> <!-- creates an install artifact -->
      <!-- Pass parameters to the next phase of the build -->
      <arg value="-P ctools-assembly" />
      <arg value="-e" /> 
      <arg value="-Dmaven.junit.fork=true" />
      <arg value="-Dgradebook.grades.config.sourcefile=${gradebook.grades.config.sourcefile}"/>
      <arg value="-Dtiny_mce.name.src=${tiny_mce.name.src}"/>
      <!-- <arg value="-X" /> -->
      <!--  sometimes need to avoid this with a new build, but usually speeds things up. -->
      <!-- <arg value="-o" />   -->

      <!-- <arg value="pack-demo" /> -->

      <arg value="clean" />

      <arg value="install" />

      <!--
      <arg value="sakai:clean" />
      <arg value="sakai:build" />
      <arg value="sakai:deploy-zip" />
      <arg value="pack-src" /> 
      -->
    </exec>
  </target>

  <target name="compileSakai.noclean" if="noclean">
    <exec executable="${maven_name}"
    	  dir="${build.dir}/ctools-build"
	  failonerror="true"
	  searchpath="true"
	  >
      <env key="MAVEN_OPTS" value="-Djava.net.preferIPv4Stack=true -Xmx768m" />

      <!-- use this profile -->
      <!-- <arg value="-P ctools" /> --> <!-- does a build with new ctools profile -->
      <!-- <arg value="-P pack-demo" /> --> <!-- creates an install artifact -->
      <arg value="-P ctools-assembly" />
      <arg value="-e" /> 
      <!-- Pass parameters to the next phase of the build -->
      <arg value="-Dmaven.junit.fork=true" />
      <arg value="-Dgradebook.grades.config.sourcefile=${gradebook.grades.config.sourcefile}"/>
      <arg value="-Dtiny_mce.name.src=${tiny_mce.name.src}"/>
      <arg value="-Dnoclean=${noclean}"/>
      <!-- <arg value="-X" /> -->
      <!--  sometimes need to avoid this with a new build, but usually speeds things up. -->
      <!-- <arg value="-o" />   -->

      <!-- <arg value="pack-demo" /> -->

      <arg value="install" />

      <!--
      <arg value="sakai:clean" />
      <arg value="sakai:build" />
      <arg value="sakai:deploy-zip" />
      <arg value="pack-src" /> 
      -->
    </exec>
  </target>


  <target name="packSource">
    <defaultexcludes remove="**/.svn"/>
    <defaultexcludes remove="**/.svn/**"/>
    <tar destfile="sakai-src-svn.tar" longfile="gnu" >
      <tarfileset dir="." prefix="sakai-src" excludes="CVS/**,**/target/**,**/bin/**,sakai*.zip,,sakai*.tar.gz,sakai*.tar" 
		  compression="gzip" />
    </tar>
    <defaultexcludes default="true"/>
  </target>

</project>
