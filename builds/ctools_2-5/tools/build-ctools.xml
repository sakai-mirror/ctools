<project name="ctoolsBuildA" basedir="." default="ctoolsBuildInfo" >

  <!--

$Id$
$HeadURL$

  -->

  <target name="ctoolsBuildInfo">
    <echo>
      Install the CTools specific code.  It may not be called if you want to have a 
      pure sakai build.  It will extract the ctools code, delete unecessary code,
      and will edit values in code or configuration files as appropriate.  For example it 
      will add the grad tool sites to the site type configuration xml file.
      This should not be invoked on its own.  It will be called by the master build.xml.
      The default configuration values are given below.  They may be overridden by a build
      properties file.

      ctools.extract.skip = ${ctools.extract.skip}
      ctools.svnurl = ${ctools.svnurl}
      ctools.revision = ${ctools.revision}
    </echo>
  </target>


  <!-- ================================================== -->
  <!--           deal with CTools specific source         -->
  <!-- ================================================== -->


  <!-- entry points -->
  
  <!-- get the source -->

  <!-- test to see if this is necessary -->
  <target name="getCtoolsSrc">
    <antcall target="removeUnneededCtools" />
  </target>


  <!-- change source as required -->
  <target name="editCtools" 
	  depends="editSrcGlobal,editGradTools,editDefaultTools,editGrades,editLinktool,editCToolsJWS,editRwikiSrc,updatePomWithCToolsPom,editiTunes,editPoms" >
    <!-- edit the files that need to be modified for ctools -->
  </target>


  <target name="removeUnneededCtools" >

    <!-- these don't work well -->
    <echo> review if can delete these OSP items from build </echo>
    <!--
    <removeFromBuild deleteDir="osp/migration" />
    <removeFromBuild deleteDir="osp/warehouse" /> 
    <removeFromBuild deleteDir="osp/reports/api-impl" />
    <removeFromBuild deleteDir="osp/reports/components" />
    <removeFromBuild deleteDir="osp/reports/tool" />
    -->

    <!-- CTools has its own SectionFields impl, so can delete the default one -->
    <echo>verify site-manage impl</echo>
    <!-- 
    <removeFromBuild deleteDir="site-manage/site-manage-impl" />
    -->

  </target>

  <!-- add hook to make global changes, e.g. make change allocation of new boolean values to use valueOf -->
  <!-- define any value for src.global.edit.skip to avoid doing this step. -->
  <target name="editSrcGlobal" if="src.global.edit.perform" 
	  description="make any global changes to the source desired.">
    <echo> Run global edit script </echo>
    <exec dir="." executable="perl" failonerror="true">
      <arg value="${patches.dir}/easy_wins_find_java.pl" />
      <arg value="${work.dir}/build" />
      <arg value="0" />
    </exec>
  </target>

  <!-- add the gradtools configuration changes to the sakai code. -->
  <target name="editGradTools">
    
  </target>

  <!-- Be sure these tools don't appear in the project category -->
  <target name="editDefaultTools" >
  </target>

  <target name="editGrades">
  </target>

  <!-- copy the linktool jws file to the web-services directory -->
  <target name="editLinktool" unless="linktool.install.skip" >
  </target>

  <!-- copy in the CTools web services -->

  <target name="editCToolsJWS" unless="ctools.install.skip" >
  </target>


  <target name="updatePomWithCToolsPom"
	  description="Replace default Sakai pom with one customized for CTools." >
    <echo>Insert a top level pom suitable for CTools.</echo>
    <!-- backup the sakai pom -->
    <!--
    <move file="${build.dir}/pom.xml" tofile="${build.dir}/pom.xml.dist" />
    -->
    <!-- insert the ctools pom -->
    <echo> user.dir: ${user.dir} </echo>
    <copy file="${user.dir}/ctools.pom.xml"
  	  tofile="${build.dir}/ctools-build/pom.xml"
	  overwrite="true"
	  />
  </target>

  <!-- copy in the rwiki default pages properties file. -->

  <target name="editRwikiSrc" unless="skipPrepopulatePages" >
  </target>

  <!-- Need to do a search and replace on itunes presently in the current version -->
  <!-- This should be able to be used for a variety of contrib projects now -->
  <target name="editiTunes">
      <echo>editing itunes: SNAPSHOT->${version.sakai.tag}</echo>
         <replaceregexp >
	     <fileset dir="${work.dir}/build/itunes" >
	     <include name="**/pom.xml"/>
	</fileset>
	<regexp pattern="(&lt;version&gt;)(.*)(&lt;/version&gt;)" />
	<substitution expression="\1${version.sakai.tag}\3" />
	 </replaceregexp>
     
  </target>

  <!-- This target edits out some modules from poms before the build -->
  <!-- I've been searching for which ones to remove with 
  find . -name "pom.xml" | xargs grep <component to remove>
  And using the directory as the tool and toolname as the value in the pom to remove

  I manually comment it out and run a mvn install to make sure it builds successful to save time.
  -->
  <target name="editPoms">
      <antcall target="doRegexpPoms">
	  <param name="toolname" value="content"/>
          <param name="modulename" value="content-impl-providers/pack"/>
      </antcall>
      <antcall target="doRegexpPoms">
	  <param name="toolname" value="site-manage"/>
	  <param name="modulename" value="site-manage-impl/pack"/>
      </antcall>
      <antcall target="doRegexpPoms">
	  <param name="toolname" value="providers"/>
          <param name="modulename" value="component"/>
      </antcall>
      <antcall target="doRegexpPoms">
	  <param name="toolname" value="course-management"/>
	  <param name="modulename" value="cm-impl/hibernate-pack"/>
      </antcall>
  </target>

  <!--
    Performs a regexp on pom.xml files in a directory to comment out modules
	param toolname=name of directory of pom tool to search
	param modulename=name of module to remowe
  -->
  <target name="doRegexpPoms">
      <echo>pre-removing ${toolname}/${modulename}</echo>
         <replaceregexp flags="g">
	     <fileset dir="${work.dir}/build/${toolname}/" >
	     <include name="**/pom.xml"/>
	</fileset>
	<!-- This regexp matches a <module>toolname</module> and comments it out. It was fixed it allow it to be reran if a comment was already added -->
	<regexp pattern="(&lt;!--)?.*(&lt;module.*${modulename}.*module&gt;).*(--&gt;)?" />
	<substitution expression="&lt;!-- \2 --&gt;" />
	</replaceregexp>
    </target>



</project>
