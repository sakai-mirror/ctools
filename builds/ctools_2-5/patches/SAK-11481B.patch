Index: content/content-api/api/src/java/org/sakaiproject/content/api/ContentHostingService.java
===================================================================
--- content/content-api/api/src/java/org/sakaiproject/content/api/ContentHostingService.java	(revision 35077)
+++ content/content-api/api/src/java/org/sakaiproject/content/api/ContentHostingService.java	(revision 35079)
@@ -1377,6 +1377,21 @@
 	 */
 	public List findResources(String type, String primaryMimeType, String subMimeType);
 
+	  /**
+    * Find the resources this user has read access to from all worksites of the appropriate type.
+    * 
+    * @param type
+    *        this is the ResourceProperties.PROP_STRUCTOBJ_TYPE for stuctured objects or ResourceProperties.FILE_TYPE for file resources or null for all resources.
+    * @param primaryMimeType
+    *        The primary mime type (ie. the "text" of "text/xml") This may be null to include all resources
+    * @param subMimeType
+    *        The sub type (ie, the "xml" of "text/xml") This may be null to include all resources of the primary mime type if specified.
+    * @param accessableOnly
+    *        Flag indicating if only resources this user has read access to should be returned
+    * @return List of ContentResource objects that match the search criteria
+    */
+   public List findResources(String type, String primaryMimeType, String subMimeType, boolean accessableOnly);
+   
 	/**
 	 * Return a map of Worksite collections roots that the user has access to.
 	 * 
Index: content/content-api/api/src/java/org/sakaiproject/content/cover/ContentHostingService.java
===================================================================
--- content/content-api/api/src/java/org/sakaiproject/content/cover/ContentHostingService.java	(revision 35077)
+++ content/content-api/api/src/java/org/sakaiproject/content/cover/ContentHostingService.java	(revision 35079)
@@ -817,6 +817,14 @@
 		return service.findResources(type, primaryMimeType, subMimeType);
 	}
 
+	public static java.util.List findResources(String type, String primaryMimeType, String subMimeType, boolean accessableOnly)
+	{
+	   org.sakaiproject.content.api.ContentHostingService service = getInstance();
+      if (service == null) return null;
+
+      return service.findResources(type, primaryMimeType, subMimeType, accessableOnly);
+	}
+  
 	public static java.util.Map getCollectionMap()
 	{
 		org.sakaiproject.content.api.ContentHostingService service = getInstance();
Index: content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java
===================================================================
--- content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java	(revision 35077)
+++ content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java	(revision 35079)
@@ -8258,19 +8258,39 @@
 	 */
 	public List findResources(String type, String primaryMimeType, String subMimeType)
 	{
-		List globalList = new ArrayList();
+		return findResources(type, primaryMimeType, subMimeType, true);
+	}
+	
+	/**
+    * {@inheritDoc}
+    */
+   public List findResources(String type, String primaryMimeType, String subMimeType, boolean findAccessableOnly) {
+	   List globalList = new ArrayList();
+	   List<String> collectionList = new ArrayList<String>();
 
-		Map othersites = getCollectionMap();
-		Iterator siteIt = othersites.keySet().iterator();
-		while (siteIt.hasNext())
-		{
-			String collId = (String) siteIt.next();
-			String displayName = (String) othersites.get(collId);
-			List artifacts = getFlatResources(collId);
-			globalList.addAll(filterArtifacts(artifacts, type, primaryMimeType, subMimeType, true));
-		}
+	   if (findAccessableOnly) {
+         Map othersites = getCollectionMap();
+         Iterator siteIt = othersites.keySet().iterator();
+         while (siteIt.hasNext())
+         {
+            String collId = (String) siteIt.next();
+            //String displayName = (String) othersites.get(collId);
+            collectionList.add(collId);
+            
+         }
+	   }
+	   else {
+	      // This will find all, not just the sites we have access to
+	      collectionList.add("/");
+	   }
+      
+      for (Iterator<String> iter = collectionList.iterator(); iter.hasNext();) {
+         String collectionId = iter.next();
+         List artifacts = getFlatResources(collectionId);
+         globalList.addAll(filterArtifacts(artifacts, type, primaryMimeType, subMimeType, true));
+      }
 
-		return globalList;
+      return globalList;
 	}
 
 	/**
Index: metaobj/metaobj-impl/api-impl/src/java/org/sakaiproject/metaobj/shared/mgt/impl/StructuredArtifactFinder.java
===================================================================
--- metaobj/metaobj-impl/api-impl/src/java/org/sakaiproject/metaobj/shared/mgt/impl/StructuredArtifactFinder.java	(revision 35077)
+++ metaobj/metaobj-impl/api-impl/src/java/org/sakaiproject/metaobj/shared/mgt/impl/StructuredArtifactFinder.java	(revision 35079)
@@ -66,7 +66,7 @@
 
    public Collection findByType(String type) {
       List artifacts = getContentHostingService().findResources(type,
-            null, null);
+            null, null, false);
 
       Collection returned = new ArrayList();
 
