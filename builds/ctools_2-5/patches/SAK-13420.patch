Index: polls/tool/src/java/org/sakaiproject/poll/tool/params/PollToolBean.java
===================================================================
--- polls/tool/src/java/org/sakaiproject/poll/tool/params/PollToolBean.java	(revision 50902)
+++ polls/tool/src/java/org/sakaiproject/poll/tool/params/PollToolBean.java	(working copy)
@@ -147,6 +147,7 @@
 			  poll.setDetails(poll.getDetails());
 	  }
 	  
+	   m_log.debug("Poll opens: " + poll.getVoteOpen() + " and closes: " + poll.getVoteClose());
     	if (poll.getVoteOpen().after(poll.getVoteClose())) {
 			m_log.debug("Poll closes before it opens");
 			
@@ -265,6 +266,7 @@
 	 option.setOptionText(FormattedText.processFormattedText(option.getOptionText(), sb, true, true));
 	 
 	 String text = option.getOptionText();
+	      /* this breaks the current FCK editor
 	 String check = text.substring(3, text.length());
 
 	 //if the only <p> tag is the one at the start we will trim off the start and end <p> tags
@@ -280,8 +282,8 @@
 		m_log.debug("found the empty string: " + empty);
 		text = text.substring(0, text.length() - empty.length()).trim();
 	}
+	*/	
 	
-	
  	option.setOptionText(text);
  	manager.saveOption(option);
  	m_log.debug("Succesuly save option with id" + option.getId());
Index: polls/tool/src/java/org/sakaiproject/poll/tool/validators/OptionValidator.java
===================================================================
--- polls/tool/src/java/org/sakaiproject/poll/tool/validators/OptionValidator.java	(revision 50902)
+++ polls/tool/src/java/org/sakaiproject/poll/tool/validators/OptionValidator.java	(working copy)
@@ -30,6 +30,7 @@
 import org.sakaiproject.poll.logic.PollVoteManager;
 import org.sakaiproject.poll.model.Option;
 import org.sakaiproject.tool.api.ToolManager;
+import org.sakaiproject.util.FormattedText;
 
 import uk.org.ponder.messageutil.MessageLocator;
 import uk.org.ponder.messageutil.TargettedMessageList;
@@ -71,13 +72,14 @@
 
 
 		Option option = (Option) obj;
-
+		String stripText = FormattedText.convertFormattedTextToPlaintext(option.getOptionText()).trim();
 		logger.debug("validating Option with id:" + option.getOptionId());
 		if (option.getStatus()!=null && (option.getStatus().equals("cancel") || option.getStatus().equals("delete")))
 			return;
 
 
-		if (option.getOptionText() == null || option.getOptionText().trim().length()==0) {
+		if (option.getOptionText() == null || option.getOptionText().trim().length()==0 ||
+				stripText == null || stripText.length()==0) {
 			logger.debug("OptionText is empty!");
 			errors.reject("option_empty","option empty");
 			return;
@@ -85,10 +87,11 @@
 
 		//if where here option is not null or empty but could be something like "&nbsp;&nbsp;"
 		String text = option.getOptionText();
+		
+		String check = "";
+		if (text.length() >3)
+			check = text.substring(3, text.length());
 
-
-		String check = text.substring(3, text.length());
-
 		//if the only <p> tag is the one at the start we will trim off the start and end <p> tags
 		if (!org.sakaiproject.util.StringUtil.containsIgnoreCase(check, "<p>")) {
 			//this is a single para block
