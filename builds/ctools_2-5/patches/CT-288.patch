svn diff -r35100:35101 https://source.sakaiproject.org/svn
Index: ctools/branches/ctools_2-4/gradtools/tool/src/java/org/sakaiproject/tool/dissertation/DissertationAction.java
===================================================================
--- ctools/branches/ctools_2-4/gradtools/tool/src/java/org/sakaiproject/tool/dissertation/DissertationAction.java	(revision 35100)
+++ ctools/branches/ctools_2-4/gradtools/tool/src/java/org/sakaiproject/tool/dissertation/DissertationAction.java	(revision 35101)
@@ -36,10 +36,12 @@
 import org.sakaiproject.api.app.dissertation.CandidatePathEdit;
 import org.sakaiproject.api.app.dissertation.Dissertation;
 import org.sakaiproject.api.app.dissertation.DissertationEdit;
+//import org.sakaiproject.api.app.dissertation.DissertationService;
+import org.sakaiproject.api.app.dissertation.cover.DissertationService;
 import org.sakaiproject.api.app.dissertation.DissertationStep;
 import org.sakaiproject.api.app.dissertation.StepStatus;
 import org.sakaiproject.api.app.dissertation.StepStatusEdit;
-import org.sakaiproject.api.app.dissertation.cover.DissertationService;
+//import org.sakaiproject.api.app.dissertation.cover.DissertationService;
 import org.sakaiproject.cheftool.Context;
 import org.sakaiproject.cheftool.JetspeedRunData;
 import org.sakaiproject.cheftool.RunData;
@@ -49,19 +51,20 @@
 import org.sakaiproject.cheftool.api.MenuItem;
 import org.sakaiproject.cheftool.menu.MenuEntry;
 import org.sakaiproject.cheftool.menu.MenuImpl;
+import org.sakaiproject.component.cover.ComponentManager;
 import org.sakaiproject.content.api.ContentResource;
-import org.sakaiproject.content.cover.ContentHostingService;
+//import org.sakaiproject.content.cover.ContentHostingService;
 import org.sakaiproject.event.api.SessionState;
 import org.sakaiproject.exception.IdUnusedException;
 import org.sakaiproject.exception.PermissionException;
 import org.sakaiproject.site.api.Site;
-import org.sakaiproject.site.cover.SiteService;
+//import org.sakaiproject.site.cover.SiteService;
 import org.sakaiproject.time.api.Time;
-import org.sakaiproject.time.cover.TimeService;
-import org.sakaiproject.tool.cover.ToolManager;
+//import org.sakaiproject.time.cover.TimeService;
+//import org.sakaiproject.tool.cover.ToolManager;
 import org.sakaiproject.user.api.User;
 import org.sakaiproject.user.api.UserNotDefinedException;
-import org.sakaiproject.user.cover.UserDirectoryService;
+//import org.sakaiproject.user.cover.UserDirectoryService;
 import org.sakaiproject.util.ParameterParser;
 
 /**
@@ -74,6 +77,28 @@
 public class DissertationAction
 	extends VelocityPortletPaneledAction
 {
+	private static final long serialVersionUID = 1L;
+
+	private org.sakaiproject.content.api.ContentHostingService contentHostingService =
+		(org.sakaiproject.content.api.ContentHostingService) ComponentManager.get(org.sakaiproject.content.api.ContentHostingService.class);
+	
+	private org.sakaiproject.site.api.SiteService siteService =
+		(org.sakaiproject.site.api.SiteService) ComponentManager.get(org.sakaiproject.site.api.SiteService.class);
+	
+	private org.sakaiproject.time.api.TimeService timeService = 
+		(org.sakaiproject.time.api.TimeService) ComponentManager.get(org.sakaiproject.time.api.TimeService.class);
+	
+	private org.sakaiproject.tool.api.ToolManager toolManager = 
+		(org.sakaiproject.tool.api.ToolManager) ComponentManager.get(org.sakaiproject.tool.api.ToolManager.class);
+	
+	private org.sakaiproject.user.api.UserDirectoryService userDirectoryService =
+		(org.sakaiproject.user.api.UserDirectoryService) ComponentManager.get(org.sakaiproject.user.api.UserDirectoryService.class);
+	
+	/*
+	private org.sakaiproject.api.app.dissertation.DissertationService DissertationService = 
+		(org.sakaiproject.api.app.dissertation.DissertationService) ComponentManager.get(org.sakaiproject.api.app.dissertation.DissertationService.class);
+	*/
+	
 	/** The state mode	*/
 	private static final String STATE_MODE = "Dissertation.mode";
 	
@@ -1686,7 +1711,7 @@
 					statusEdit = null;
 					CandidatePath candidatePath = DissertationService.getCandidatePath((String)state.getAttribute(STATE_CURRENT_CANDIDATE_PATH_REFERENCE));
 					statusEdit = DissertationService.editStepStatus(stepStatusRefs[x]);
-					statusEdit.setTimeCompleted(TimeService.newTime());
+					statusEdit.setTimeCompleted(timeService.newTime());
 					statusEdit.setCompleted(true);
 					DissertationService.commitEdit(statusEdit);
 					state.setAttribute(STATE_CANDIDATE_PATH_TEMPLATE_STEPS, getTemplateSteps(candidatePath, state, true));
@@ -4038,7 +4063,7 @@
 				{
 					candidatePath = DissertationService.getCandidatePath(pathRef);
 					statusEdit = DissertationService.editStepStatus(stepStatusRefs[x]);
-					statusEdit.setTimeCompleted(TimeService.newTime());
+					statusEdit.setTimeCompleted(timeService.newTime());
 					statusEdit.setCompleted(true);
 					DissertationService.commitEdit(statusEdit);
 					state.setAttribute(STATE_CANDIDATE_PATH_TEMPLATE_STEPS, getTemplateSteps(candidatePath, state, false));
@@ -4077,7 +4102,7 @@
 					statusEdit = null;
 					CandidatePath candidatePath = DissertationService.getCandidatePathForCandidate((String)state.getAttribute(STATE_SELECTED_CANDIDATE_ID));
 					statusEdit = DissertationService.editStepStatus(stepStatusRefs[x]);
-					statusEdit.setTimeCompleted(TimeService.newTime());
+					statusEdit.setTimeCompleted(timeService.newTime());
 					statusEdit.setCompleted(true);
 					DissertationService.commitEdit(statusEdit);
 					state.setAttribute(STATE_CANDIDATE_PATH_TEMPLATE_STEPS, getTemplateSteps(candidatePath, state, false));
@@ -4127,7 +4152,7 @@
 		if (currentSite==null)
 		{
 			//currentSite = PortalService.getCurrentSiteId();
-			currentSite = ToolManager.getCurrentPlacement().getContext();
+			currentSite = toolManager.getCurrentPlacement().getContext();
 			state.setAttribute(STATE_CURRENT_SITE, currentSite);
 		}
 		
@@ -4252,13 +4277,20 @@
 			catch(IdUnusedException e)
 			{
 				if(Log.isWarnEnabled())
-					Log.warn("chef", this + ".doAlphabeticalChoice map emplid " + e);
+					Log.warn("chef", this + ".doAlphabeticalChoice map emplid for chefid '" + chefid + "' " + e);
+				continue;
 			}
 			catch(PermissionException e)
 			{
 				if(Log.isWarnEnabled())
-					Log.warn("chef", this + ".doAlphabeticalChoice map emplid " + e);
+					Log.warn("chef", this + ".doAlphabeticalChoice map emplid for chefid '" + chefid + "' "  + e);
+				continue;
 			}
+			catch(Exception e) {
+				if(Log.isWarnEnabled())
+					Log.warn("chef", this + ".doAlphabeticalChoice map emplid for chefid '" + chefid + "' "  + e);
+				continue;
+			}
 			allUsersEmplids.put(chefid,emplid);
 		}
 		state.setAttribute(STATE_USERS_LIST, allUsers);
@@ -4286,7 +4318,7 @@
 			//moving to admin view candidate path mode
 			try
 			{
-				User selectedUser = UserDirectoryService.getUser(selectedCandidate);
+				User selectedUser = userDirectoryService.getUser(selectedCandidate);
 				String displayName = selectedUser.getDisplayName();
 				if(displayName == null)
 					displayName = "The candidate ";
@@ -4296,7 +4328,7 @@
 					emplid = "";
 				state.setAttribute(STATE_SELECTED_CANDIDATE_EMPLID, emplid);
 				String siteId = DissertationService.getParentSiteForUser(selectedUser.getId());
-				Site site = SiteService.getSite(siteId);
+				Site site = siteService.getSite(siteId);
 				String groupDisplayName = site.getTitle();
 				if(groupDisplayName == null)
 					groupDisplayName = "";
@@ -4348,12 +4380,33 @@
 	protected void initState(SessionState state, VelocityPortlet portlet, JetspeedRunData rundata)
 	{
 		super.initState(state, portlet, rundata);
-
+		
+		if(contentHostingService == null)
+			contentHostingService =
+				(org.sakaiproject.content.api.ContentHostingService) ComponentManager.get(org.sakaiproject.content.api.ContentHostingService.class);
+		if(siteService == null)	
+			siteService =
+				(org.sakaiproject.site.api.SiteService) ComponentManager.get(org.sakaiproject.site.api.SiteService.class);
+		if(timeService == null)
+			timeService =
+				(org.sakaiproject.time.api.TimeService) ComponentManager.get(org.sakaiproject.time.api.TimeService.class);
+		if(toolManager == null)
+			toolManager =
+				(org.sakaiproject.tool.api.ToolManager) ComponentManager.get(org.sakaiproject.tool.api.ToolManager.class);
+		if(userDirectoryService == null)	
+			userDirectoryService =
+				(org.sakaiproject.user.api.UserDirectoryService) ComponentManager.get(org.sakaiproject.user.api.UserDirectoryService.class);
+		/*
+		if(DissertationService == null)	
+			DissertationService =
+				(org.sakaiproject.api.app.dissertation.DissertationService) ComponentManager.get(org.sakaiproject.api.app.dissertation.DissertationService.class);
+		*/
+		
 		//this user
 		User currentUser = null;
 		if (state.getAttribute(STATE_USER) == null)
 		{
-			currentUser = UserDirectoryService.getCurrentUser();
+			currentUser = userDirectoryService.getCurrentUser();
 			state.setAttribute(STATE_USER, currentUser);
 		}
 		else
@@ -4384,13 +4437,13 @@
 		if (state.getAttribute(STATE_CURRENT_SITE)==null)
 		{
 			//currentSite = PortalService.getCurrentSiteId();
-			currentSite = ToolManager.getCurrentPlacement().getContext();
+			currentSite = toolManager.getCurrentPlacement().getContext();
 			state.setAttribute(STATE_CURRENT_SITE, currentSite);
 			
 			//this department
 			try
 			{
-				deptSite = SiteService.getSite(currentSite);
+				deptSite = siteService.getSite(currentSite);
 				String fullName = deptSite.getTitle();
 				if(fullName == null)
 					fullName = "";
@@ -4617,7 +4670,7 @@
 			try
 			{
 				//path.getCandidate() returns User id
-				candidate = UserDirectoryService.getUser(path.getCandidate());
+				candidate = userDirectoryService.getUser(path.getCandidate());
 			}
 			catch(UserNotDefinedException e)
 			{
@@ -5019,10 +5072,10 @@
 		boolean retVal = false;
 		String id = null;
 		ContentResource resource = null;
-		id = ContentHostingService.getSiteCollection(ToolManager.getCurrentPlacement().getContext()) + SNAPSHOT_FILENAME;
+		id = contentHostingService.getSiteCollection(toolManager.getCurrentPlacement().getContext()) + SNAPSHOT_FILENAME;
 		try
 		{
-			resource = ContentHostingService.getResource(id);
+			resource = contentHostingService.getResource(id);
 		}
 		catch(IdUnusedException e)
 		{
@@ -5947,7 +6000,7 @@
 		{
 			try
 			{
-				String sortName = UserDirectoryService.getUser(chefId).getSortName();
+				String sortName = userDirectoryService.getUser(chefId).getSortName();
 				if(sortName != null)
 				{
 					retVal = sortName.substring(0,1).toUpperCase();
@@ -5972,221 +6025,34 @@
 	private Vector getLetters(String schoolSite, String site, String stepsType)
 	{
 		Vector retVal = new Vector();
+		String[] letters = new String[] {"A","B","C","D","E","F","G","H","I","J","K","L","M","N",
+				"O","P","Q","R","S","T","U","V","W","X","Y","Z"};
+		for(int i = 0; i < letters.length; i++) {
+			getLetter(letters[i],schoolSite, site, stepsType, retVal);
+		}
+		return retVal;
+	}
+
+	/**
+	 * Add a new LetterCarrier to the collection of LetterCarrier objects for a site.
+	 * @param letter
+	 * @param schoolSite
+	 * @param site
+	 * @param stepsType
+	 * @param retVal
+	 */
+	private void getLetter(String letter, String schoolSite, String site, String stepsType, Vector retVal) {
 		boolean hasMembers = false;
 		LetterCarrier aCarrier = null;
-		
-		//TODO move to service
-		
-		aCarrier = new LetterCarrier("A");
+		aCarrier = new LetterCarrier(letter);
 		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"A");
+			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,letter);
 		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"A");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-
-		aCarrier = new LetterCarrier("B");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"B");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"B");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-
-		aCarrier = new LetterCarrier("C");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"C");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"C");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-
-		aCarrier = new LetterCarrier("D");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"D");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"D");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-
-		aCarrier = new LetterCarrier("E");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"E");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"E");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-
-		aCarrier = new LetterCarrier("F");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"F");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"F");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-
-		aCarrier = new LetterCarrier("G");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"G");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"G");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-
-		aCarrier = new LetterCarrier("H");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"H");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"H");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-
-		aCarrier = new LetterCarrier("I");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"I");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"I");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-
-		aCarrier = new LetterCarrier("J");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"J");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"J");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
+			hasMembers = DissertationService.isUserOfParentForLetter(site,letter);
 		
-		aCarrier = new LetterCarrier("K");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"K");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"K");
 		aCarrier.setHasMembers(hasMembers);
 		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("L");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"L");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"L");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("M");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"M");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"M");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("N");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"N");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"N");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("O");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"O");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"O");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("P");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"P");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"P");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("Q");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"Q");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"Q");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("R");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"R");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"R");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("S");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"S");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"S");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("T");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"T");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"T");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("U");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"U");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"U");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("V");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"V");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"V");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("W");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"W");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"W");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("X");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"X");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"X");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("Y");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"Y");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"Y");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		
-		aCarrier = new LetterCarrier("Z");
-		if(site.equals(schoolSite))
-			hasMembers = DissertationService.isUserOfTypeForLetter(stepsType,"Z");
-		else
-			hasMembers = DissertationService.isUserOfParentForLetter(site,"Z");
-		aCarrier.setHasMembers(hasMembers);
-		retVal.add(aCarrier);
-		return retVal;
-		
-	} // getLetters
+	}
 	
 	
 	/**
Index: ctools/branches/ctools_2-4/gradtools/tool/src/java/org/sakaiproject/tool/dissertation/DissertationUploadAction.java
===================================================================
--- ctools/branches/ctools_2-4/gradtools/tool/src/java/org/sakaiproject/tool/dissertation/DissertationUploadAction.java	(revision 35100)
+++ ctools/branches/ctools_2-4/gradtools/tool/src/java/org/sakaiproject/tool/dissertation/DissertationUploadAction.java	(revision 35101)
@@ -54,23 +54,24 @@
 import org.sakaiproject.cheftool.api.MenuItem;
 import org.sakaiproject.cheftool.menu.MenuEntry;
 import org.sakaiproject.cheftool.menu.MenuImpl;
+import org.sakaiproject.component.cover.ComponentManager;
 import org.sakaiproject.content.api.ContentResource;
 import org.sakaiproject.content.api.ContentResourceEdit;
-import org.sakaiproject.content.cover.ContentHostingService;
+//import org.sakaiproject.content.cover.ContentHostingService;
 import org.sakaiproject.entity.api.ResourceProperties;
 import org.sakaiproject.entity.api.ResourcePropertiesEdit;
 import org.sakaiproject.event.api.SessionState;
 import org.sakaiproject.exception.IdUnusedException;
 import org.sakaiproject.site.api.Site;
-import org.sakaiproject.site.cover.SiteService;
+//import org.sakaiproject.site.cover.SiteService;
 import org.sakaiproject.thread_local.cover.ThreadLocalManager;
 import org.sakaiproject.time.api.Time;
-import org.sakaiproject.time.cover.TimeService;
+//import org.sakaiproject.time.cover.TimeService;
 import org.sakaiproject.tool.api.Session;
-import org.sakaiproject.tool.cover.SessionManager;
-import org.sakaiproject.tool.cover.ToolManager;
+//import org.sakaiproject.tool.cover.SessionManager;
+//import org.sakaiproject.tool.cover.ToolManager;
 import org.sakaiproject.user.api.User;
-import org.sakaiproject.user.cover.UserDirectoryService;
+//import org.sakaiproject.user.cover.UserDirectoryService;
 import org.sakaiproject.util.FileItem;
 import org.sakaiproject.util.ParameterParser;
 import org.sakaiproject.util.SortedIterator;
@@ -85,6 +86,26 @@
 */
 public class DissertationUploadAction extends VelocityPortletPaneledAction
 {
+	private static final long serialVersionUID = 1L;
+	
+	private org.sakaiproject.content.api.ContentHostingService contentHostingService =
+		(org.sakaiproject.content.api.ContentHostingService) ComponentManager.get(org.sakaiproject.content.api.ContentHostingService.class);
+	
+	private org.sakaiproject.site.api.SiteService siteService =
+		(org.sakaiproject.site.api.SiteService) ComponentManager.get(org.sakaiproject.site.api.SiteService.class);
+	
+	private org.sakaiproject.time.api.TimeService timeService =
+		(org.sakaiproject.time.api.TimeService) ComponentManager.get(org.sakaiproject.time.api.TimeService.class);
+	
+	private org.sakaiproject.tool.api.ToolManager toolManager =
+		(org.sakaiproject.tool.api.ToolManager) ComponentManager.get(org.sakaiproject.tool.api.ToolManager.class);
+	
+	private org.sakaiproject.user.api.UserDirectoryService userDirectoryService =
+		(org.sakaiproject.user.api.UserDirectoryService) ComponentManager.get(org.sakaiproject.user.api.UserDirectoryService.class);
+	
+	private org.sakaiproject.tool.api.SessionManager sessionManager =
+		(org.sakaiproject.tool.api.SessionManager) ComponentManager.get(org.sakaiproject.tool.api.SessionManager.class);
+	
 	/** The state attributes */
 	private final static String  STATE_INITIALIZED = "initialized";
 	private final static String  STATE_ACTION = "DisserationUploadAction";
@@ -202,13 +223,13 @@
 
 		//is this the Rackham site?
 		//if(!DissertationService.getSchoolSite().equals(PortalService.getCurrentSiteId()))
-		if(!DissertationService.getSchoolSite().equals(ToolManager.getCurrentPlacement().getContext()))
+		if(!DissertationService.getSchoolSite().equals(toolManager.getCurrentPlacement().getContext()))
 		{
 			mode = MODE_SITEID_NOT_RACKHAM;
 		}
 		
 		//does this user have permission to update the Rackham site?
-		if(!SiteService.allowUpdateSite(DissertationService.getSchoolSite()))
+		if(!siteService.allowUpdateSite(DissertationService.getSchoolSite()))
 		{
 			mode = MODE_NO_UPLOAD_PERMISSION;
 		}
@@ -423,7 +444,7 @@
 		{
 			try
 			{
-				Site site = SiteService.getSite(id);
+				Site site = siteService.getSite(id);
 			}
 			catch(IdUnusedException e)
 			{
@@ -792,12 +813,12 @@
 		String fname = null;
 		String lname = null;
 		StringBuffer buf = null;
-		Time now = TimeService.newTime();
+		Time now = timeService.newTime();
 		List sections = getSectionHeads();
 		try
 		{
 			//path.getCandidate() returns User id
-			User candidate = UserDirectoryService.getUser(path.getCandidate());
+			User candidate = userDirectoryService.getUser(path.getCandidate());
 			if(candidate != null)
 			{
 				fname = candidate.getFirstName();
@@ -1009,10 +1030,10 @@
 		//get the static checklist template
 		try
 		{
-			home = ContentHostingService.getSiteCollection(ToolManager.getCurrentPlacement().getContext());
+			home = contentHostingService.getSiteCollection(toolManager.getCurrentPlacement().getContext());
 			try
 			{
-				ContentHostingService.checkCollection(home);
+				contentHostingService.checkCollection(home);
 			}
 			catch(Exception e)
 			{
@@ -1020,7 +1041,7 @@
 					Log.warn("chef", this + ".getStaticTemplate checkCollection " + e);
 				return body;
 			}
-			ContentResource checklist = ContentHostingService.getResource(home + DissertationService.STATIC_CHECKLIST_TEMPLATE);
+			ContentResource checklist = contentHostingService.getResource(home + DissertationService.STATIC_CHECKLIST_TEMPLATE);
 			
 			// read the body
 			if (checklist.getContent () != null)
@@ -1450,14 +1471,14 @@
 		byte[] results = buf.toString().getBytes();
 		try
 		{
-			edit = ContentHostingService.addResource("/group/rackham/duplicates.txt");
+			edit = contentHostingService.addResource("/group/rackham/duplicates.txt");
 			edit.setContent(results);
 			edit.setContentType("text/plain");
 			edit.setContentLength(results.length);
 			ResourcePropertiesEdit props = edit.getPropertiesEdit();
 			props.addProperty(ResourceProperties.PROP_DISPLAY_NAME,"Duplicate Steps");
 			props.addProperty(ResourceProperties.PROP_DESCRIPTION, "Duplicate Steps");
-			ContentHostingService.commitResource(edit);
+			contentHostingService.commitResource(edit);
 		}
 		catch(Exception e)
 		{
@@ -1465,7 +1486,7 @@
 			{
 				try
 				{
-					ContentHostingService.removeResource(edit);
+					contentHostingService.removeResource(edit);
 				}
 				catch(Exception ee)
 				{
@@ -1615,7 +1636,7 @@
 		try
 		{
 			//path.getCandidate() returns User id
-			name = ((User)UserDirectoryService.getUser(path.getCandidate())).getDisplayName();
+			name = ((User)userDirectoryService.getUser(path.getCandidate())).getDisplayName();
 		}
 		catch(Exception e){}
 		
@@ -1712,7 +1733,7 @@
 				try
 				{
 					//currentSite = PortalService.getCurrentSiteId();
-					currentSite = ToolManager.getCurrentPlacement().getContext();
+					currentSite = toolManager.getCurrentPlacement().getContext();
 					edit = DissertationService.addBlockGrantGroup(currentSite);
 					edit.setCode(field.getGroupCode());
 					edit.setDescription(field.getGroupName());
@@ -2148,7 +2169,7 @@
 		String mpFileName = (String)state.getAttribute(STATE_MP_FILE_NAME);
 		String msg = null;
 		//String currentSite = PortalService.getCurrentSiteId();
-		String currentSite = ToolManager.getCurrentPlacement().getContext();
+		String currentSite = toolManager.getCurrentPlacement().getContext();
 		
 		//get the content of the files uploaded
 		if(state.getAttribute(STATE_OARD_CONTENT_STRING)!= null)
@@ -2769,10 +2790,10 @@
 		    try
 			{
 				// set the current user to admin
-				Session s = SessionManager.getCurrentSession();
+				Session s = sessionManager.getCurrentSession();
 				if (s != null)
 				{
-					s.setUserId(UserDirectoryService.ADMIN_ID);
+					s.setUserId(userDirectoryService.ADMIN_ID);
 				}
 				else
 				{
@@ -2786,22 +2807,22 @@
 					if(m_checklist != null)
 					{
 						//check student's Resources collection is accessible
-						collectionId = ContentHostingService.getSiteCollection(m_id);
+						collectionId = contentHostingService.getSiteCollection(m_id);
 						try
 						{
-							ContentHostingService.checkCollection(collectionId);
+							contentHostingService.checkCollection(collectionId);
 							
 							//save the student's checklist in Resources
 							try
 							{
-								edit = ContentHostingService.addResource(collectionId + DissertationService.STATIC_CHECKLIST_NAME);
+								edit = contentHostingService.addResource(collectionId + DissertationService.STATIC_CHECKLIST_NAME);
 								edit.setContent(m_checklist.getBytes());
 								edit.setContentType("text/html");
 								edit.setContentLength(m_checklist.length());
 								ResourcePropertiesEdit props = edit.getPropertiesEdit();
 								props.addProperty(ResourceProperties.PROP_DISPLAY_NAME,DissertationService.STATIC_CHECKLIST_DISPLAY_NAME);
 								props.addProperty(ResourceProperties.PROP_DESCRIPTION, DissertationService.STATIC_CHECKLIST_DESCRIPTION);
-								ContentHostingService.commitResource(edit);
+								contentHostingService.commitResource(edit);
 							}
 							catch(Exception e)
 							{
@@ -2809,7 +2830,7 @@
 								{
 									try
 									{
-										ContentHostingService.removeResource(edit);
+										contentHostingService.removeResource(edit);
 									}
 									catch(Exception ee)
 									{
