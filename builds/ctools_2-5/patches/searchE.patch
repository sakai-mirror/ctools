Index: search/search-tool/.classpath
===================================================================
--- search/search-tool/.classpath	(revision 21914)
+++ search/search-tool/.classpath	(working copy)
@@ -18,5 +18,8 @@
 	<classpathentry combineaccessrules="false" kind="src" path="/util-api"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/util-util"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/user-api"/>
+	<classpathentry kind="var" path="MAVEN_REPO/jmock/jars/jmock-1.1.0.jar"/>
+	<classpathentry kind="var" path="MAVEN_REPO/jmock/jars/jmock-cglib-1.1.0.jar"/>
+	<classpathentry kind="var" path="MAVEN_REPO/cglib/jars/cglib-full-2.0.2.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
Index: search/search-tool/tool/project.xml
===================================================================
--- search/search-tool/tool/project.xml	(revision 21914)
+++ search/search-tool/tool/project.xml	(working copy)
@@ -16,18 +16,11 @@
   <build>
     <!-- java source -->
     <sourceDirectory>src/java</sourceDirectory>
-    <unitTestSourceDirectory>src/test</unitTestSourceDirectory>
+    <unitTestSourceDirectory>src/java</unitTestSourceDirectory>
     <unitTest>
-      <includes>**/*Test</includes>
-      <resources>
-	<resource>
-	  <directory>${basedir}/src/testBundle</directory>
-	  <includes>
-	    <include>**/*.*</include>
-	  </includes>
-	  <filtering>false</filtering>
-	</resource>
-      </resources>
+      <includes>
+	<include>**/*Test.java</include>
+      </includes>
     </unitTest>
     <defaultGoal>war:install</defaultGoal>
     <!-- other resources for the jar - the message bundles -->
@@ -127,6 +120,32 @@
       <version>1.0.4</version>
       <type>jar</type>
     </dependency>
+
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>3.8.1</version>
+      <type>jar</type>
+    </dependency>
+    <dependency>
+      <groupId>jmock</groupId>
+      <artifactId>jmock</artifactId>
+      <version>1.1.0</version>
+      <type>jar</type>
+    </dependency>
+   <dependency>
+      <groupId>jmock</groupId>
+      <artifactId>jmock-cglib</artifactId>
+      <version>1.1.0</version>
+      <type>jar</type>
+    </dependency>
+   <dependency>
+      <groupId>cglib</groupId>
+      <artifactId>cglib-full</artifactId>
+      <version>2.0.2</version>
+      <type>jar</type>
+    </dependency>
+
   </dependencies>
 </project>
 
Index: search/search-tool/tool/src/java/org/sakaiproject/search/tool/SearchBeanImpl.java
===================================================================
--- search/search-tool/tool/src/java/org/sakaiproject/search/tool/SearchBeanImpl.java	(revision 21914)
+++ search/search-tool/tool/src/java/org/sakaiproject/search/tool/SearchBeanImpl.java	(working copy)
@@ -32,6 +32,7 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Properties;
 
 import javax.servlet.http.HttpServletRequest;
 
@@ -46,7 +47,9 @@
 import org.sakaiproject.search.api.TermFrequency;
 import org.sakaiproject.site.api.Site;
 import org.sakaiproject.site.api.SiteService;
+import org.sakaiproject.tool.api.Placement;
 import org.sakaiproject.tool.api.ToolManager;
+import org.sakaiproject.util.StringUtil;
 
 /**
  * Implementation of the search bean backing bean
@@ -108,6 +111,8 @@
 	private String placementId;
 
 	private String toolId;
+	
+	private ToolManager toolManager;
 
 	private String siteId;
 
@@ -123,6 +128,16 @@
 
 	private Site currentSite;
 
+	// Empty constructor to aid in testing.
+	 
+	public SearchBeanImpl(String siteId, SearchService ss, String search,ToolManager tm) {
+		super();
+		this.siteId = siteId;
+		this.searchService = ss;
+		this.search = search;
+		this.toolManager = tm;
+	}
+	
 	/**
 	 * Creates a searchBean
 	 * 
@@ -144,9 +159,10 @@
 		this.search = request.getParameter(SEARCH_PARAM);
 		this.searchService = searchService;
 		this.siteService = siteService;
-		this.placementId = toolManager.getCurrentPlacement().getId();
-		this.toolId = toolManager.getCurrentTool().getId();
-		this.siteId = toolManager.getCurrentPlacement().getContext();
+		this.toolManager = toolManager;
+		this.placementId = this.toolManager.getCurrentPlacement().getId();
+		this.toolId = this.toolManager.getCurrentTool().getId();
+		this.siteId = this.toolManager.getCurrentPlacement().getContext();
 		try
 		{
 			this.requestPage = Integer.parseInt(request
@@ -171,9 +187,10 @@
 		this.siteService = siteService;
 		this.sortName = sortName;
 		this.filterName = filterName;
-		this.placementId = toolManager.getCurrentPlacement().getId();
-		this.toolId = toolManager.getCurrentTool().getId();
-		this.siteId = toolManager.getCurrentPlacement().getContext();
+		this.toolManager = toolManager;
+		this.placementId = this.toolManager.getCurrentPlacement().getId();
+		this.toolId = this.toolManager.getCurrentTool().getId();
+		this.siteId = this.toolManager.getCurrentPlacement().getContext();
 		try
 		{
 			this.requestPage = Integer.parseInt(request
@@ -430,6 +447,56 @@
 		return String.valueOf(tt);
 	}
 
+	
+	/* assemble the list of search sites */
+	
+	protected List getSearchSites (String[] toolPropertySiteIds) {
+		List<String> l = new ArrayList();
+		
+		l.add(this.siteId);
+		
+		if (toolPropertySiteIds == null) return l;
+		
+		//String[] searchSiteIds = extractSiteIdsFromToolProperty(extractPropertiesFromTool());
+		String[] searchSiteIds = toolPropertySiteIds;
+
+		// add searchSiteIds to l
+		for(int i = 0;i<searchSiteIds.length;i++){
+			String ss = searchSiteIds[i];
+			if (searchSiteIds[i].length() > 0) l.add(searchSiteIds[i]);
+		}
+
+		return l;
+	}
+
+	protected String[] getToolPropertySiteIds() {
+		Properties props = extractPropertiesFromTool();
+		String[] searchSiteIds = extractSiteIdsFromProperties(props);
+		return searchSiteIds;
+	}
+	
+	/* get any site ids that are in the tool property and normalize the string.
+	 * 
+	 */
+	protected String[] extractSiteIdsFromProperties(Properties props) {
+	//	Properties props = extractPropertiesFromTool();
+		
+		String targetSiteId = StringUtil.trimToNull(props.getProperty("search_site_ids"));
+		if (targetSiteId == null) return new String[] {""};
+		String[] searchSiteIds = StringUtil.split(targetSiteId, ",");
+		for(int i = 0;i<searchSiteIds.length;i++){
+			searchSiteIds[i] = StringUtil.trimToZero(searchSiteIds[i]);
+		}
+		return searchSiteIds;
+	}
+
+	protected Properties extractPropertiesFromTool() {
+		Placement placement = toolManager.getCurrentPlacement();
+		Properties props = placement.getPlacementConfig();
+		if(props.isEmpty())
+			props = placement.getConfig();
+		return props;
+	}
 	/**
 	 * Perform the search
 	 * 
@@ -442,8 +509,11 @@
 		{
 			if (search != null && search.trim().length() > 0)
 			{
-				List l = new ArrayList();
+
+				/*				List l = new ArrayList();
 				l.add(this.siteId);
+				*/
+				List l = getSearchSites(getToolPropertySiteIds());
 				long start = System.currentTimeMillis();
 				int searchStart = requestPage * pagesize;
 				int searchEnd = searchStart + pagesize;
Index: search/search-tool/tool/src/java/org/sakaiproject/search/tool/SearchBeanImplTest.java
===================================================================
--- search/search-tool/tool/src/java/org/sakaiproject/search/tool/SearchBeanImplTest.java	(revision 0)
+++ search/search-tool/tool/src/java/org/sakaiproject/search/tool/SearchBeanImplTest.java	(revision 0)
@@ -0,0 +1,147 @@
+package org.sakaiproject.search.tool;
+
+//import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Properties;
+
+import org.sakaiproject.search.api.SearchService;
+import org.sakaiproject.search.tool.*;
+import org.sakaiproject.tool.api.Placement;
+import org.sakaiproject.tool.api.ToolManager;
+
+import org.jmock.*;
+import org.jmock.builder.NameMatchBuilder;
+import org.jmock.cglib.MockObjectTestCase;
+
+//import junit.framework.TestCase;
+
+public class SearchBeanImplTest extends MockObjectTestCase {
+
+	SearchBeanImpl sbi = null; 
+	Mock mockSearchService = null;
+	Mock mockToolManager = null;
+	Mock mockPlacement = null;
+	Mock mockProperties = null;
+	String defaultSiteId = "defaultSiteId";
+	
+	protected void setUp() throws Exception {
+		super.setUp();
+//		sbi = new SearchBeanImpl("defaultSiteId");
+		mockSearchService = mock(SearchService.class,"searchService");
+		mockToolManager = mock(ToolManager.class,"toolManager");
+		mockPlacement = mock(Placement.class,"placement");
+		mockProperties = mock(Properties.class,"properties");
+
+		sbi = new SearchBeanImpl(defaultSiteId,(SearchService) mockSearchService.proxy(),
+				"defaultSearch", (ToolManager) mockToolManager.proxy());
+	}
+
+
+	// extractPropertiesFromTool
+	
+	public void testExtractPropertiesFromToolPlacement() {
+		mockToolManager.expects(once()).method("getCurrentPlacement").will(returnValue(mockPlacement.proxy()));
+		mockPlacement.expects(once()).method("getPlacementConfig").will(returnValue(mockProperties.proxy()));
+		mockProperties.expects(once()).method("isEmpty").will(returnValue(true));
+		mockPlacement.expects(once()).method("getConfig").will(returnValue(mockProperties.proxy()));				
+		assertNotNull(sbi.extractPropertiesFromTool());
+	}
+	
+	public void testExtractPropertiesFromToolCurrentPlacement() {
+		mockToolManager.expects(once()).method("getCurrentPlacement").will(returnValue(mockPlacement.proxy()));
+		mockPlacement.expects(once()).method("getPlacementConfig").will(returnValue(mockProperties.proxy()));
+		mockProperties.expects(once()).method("isEmpty").will(returnValue(false));
+						
+		assertNotNull(sbi.extractPropertiesFromTool());
+	}
+	
+	// extractSiteIdsFromToolProperty
+	
+	public void testExtractSiteIdsFromPropertiesNoProperties() {
+		mockProperties.expects(once()).method("getProperty").with(eq("search_site_ids")).will(returnValue(null));
+		String [] s = sbi.extractSiteIdsFromProperties((Properties) mockProperties.proxy()); 
+		assertTrue("array of one empty siteIds",s.length==1);
+		assertTrue("siteId is empty","".equals(s[0]));
+	}
+	
+	public void testExtractSiteIdsFromPropertiesEmptyProperties() {
+		mockProperties.expects(once()).method("getProperty").with(eq("search_site_ids")).will(returnValue(""));
+		String [] s = sbi.extractSiteIdsFromProperties((Properties) mockProperties.proxy()); 
+		assertTrue("array of one empty siteIds",s.length==1);
+		assertTrue("siteId is empty","".equals(s[0]));
+	}
+	
+	public void testExtractSiteIdsFromProperties1SiteId() {
+		mockProperties.expects(once()).method("getProperty").with(eq("search_site_ids")).will(returnValue("SiteIdOne"));
+		String [] s = sbi.extractSiteIdsFromProperties((Properties) mockProperties.proxy()); 
+		assertTrue("array of one siteid",s.length==1);
+		assertTrue("siteId is default","SiteIdOne".equals(s[0]));
+	}
+	
+	public void testExtractSiteIdsFromProperties2SiteId() {
+		mockProperties.expects(once()).method("getProperty").with(eq("search_site_ids")).will(returnValue("SiteIdOne,SiteIdTwo"));
+		String [] s = sbi.extractSiteIdsFromProperties((Properties) mockProperties.proxy()); 
+		assertTrue("array of two siteIds",s.length==2);
+		assertTrue("siteId has two entries","SiteIdOne".equals(s[0]));
+		assertTrue("siteId has two entries","SiteIdTwo".equals(s[1]));
+	}
+	
+	public void testExtractSiteIdsFromProperties2SiteIdBlanks() {
+		mockProperties.expects(once()).method("getProperty").with(eq("search_site_ids")).will(returnValue(" SiteIdOne , SiteIdTwo "));
+		String [] s = sbi.extractSiteIdsFromProperties((Properties) mockProperties.proxy()); 
+		assertTrue("array of siteIds with blanks",s.length==2);
+		assertTrue("siteId has two entries","SiteIdOne".equals(s[0]));
+		assertTrue("siteId has two entries","SiteIdTwo".equals(s[1]));
+	}
+
+	public void testExtractSiteIdsFromPropertiesJustBlank() {
+		mockProperties.expects(once()).method("getProperty").with(eq("search_site_ids")).will(returnValue(" "));
+		String [] s = sbi.extractSiteIdsFromProperties((Properties) mockProperties.proxy()); 
+		assertTrue("single blank siteid",s.length==1);
+		assertTrue("siteId is empty","".equals(s[0]));
+	}
+	// Not tested explicitly as very simple and just calls other tested methods.
+//	public void GetToolPropertySiteIds() {
+	// fail("not yet tested");
+//	}
+	
+	// If no ids from tool properties, will get only current site id
+	public void testGetSearchSitesNullSiteIdsArray() {
+		List l = sbi.getSearchSites(null);
+		assertTrue("no property site ids",l.size()==1);
+		assertEquals("default site id",defaultSiteId,l.get(0));
+	}
+
+	public void testGetSearchSitesEmptySiteIdsArray() {
+		List l = sbi.getSearchSites(new String[] {});
+		assertTrue("no property site ids",l.size()==1);
+		assertEquals("default site id",defaultSiteId,l.get(0));
+	}
+	
+	public void testGetSearchSitesEmptyValueSiteIdsArray() {
+		List l = sbi.getSearchSites(new String[] {""});
+		assertTrue("no property site ids",l.size()==1);
+		assertEquals("default site id",defaultSiteId,l.get(0));
+	}
+	
+	public void testGetSearchSitesOneValueSiteIdsArray() {
+		List l = sbi.getSearchSites(new String[] {"toolProp1"});
+		assertTrue("no property site ids",l.size()==2);
+		assertEquals("default site id",defaultSiteId,l.get(0));
+		assertEquals("toolProp1","toolProp1",l.get(1));
+	}
+	
+	public void testGetSearchSitesTwoValueSiteIdsArray() {
+		List l = sbi.getSearchSites(new String[] {"toolSiteId1","toolSiteId2"});
+		assertTrue("no property site ids",l.size()==3);
+		assertEquals("default site id",defaultSiteId,l.get(0));
+		assertEquals("toolSiteId1","toolSiteId1",l.get(1));
+		assertEquals("toolSiteId2","toolSiteId2",l.get(2));
+	}
+	
+}
+
+//Mock mockSubscriber = mock(Subscriber.class);
+//Publisher publisher = new Publisher();
+//publisher.add( (Subscriber)mockSubscriber.proxy() );

Property changes on: search/search-tool/tool/src/java/org/sakaiproject/search/tool/SearchBeanImplTest.java
___________________________________________________________________
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native

Index: search/search-tool/tool/src/webapp/tools/sakai.search.xml
===================================================================
--- search/search-tool/tool/src/webapp/tools/sakai.search.xml	(revision 21914)
+++ search/search-tool/tool/src/webapp/tools/sakai.search.xml	(working copy)
@@ -18,7 +18,9 @@
 		<category name="course" />
          <category name="project" />
          <category name="myworkspace" />
-		
+         
+         <!--  placeholder to allow specifing additional sites to search. -->
+		<configuration name="search_site_ids" value="" />
 
 	</tool>
 
Index: search/search-impl/.classpath
===================================================================
--- search/search-impl/.classpath	(revision 21914)
+++ search/search-impl/.classpath	(working copy)
@@ -31,11 +31,14 @@
 	<classpathentry combineaccessrules="false" kind="src" path="/util-util"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/db-api"/>
 	<classpathentry kind="var" path="MAVEN_REPO/lucene/jars/lucene-misc-1.9.1.jar"/>
-	<classpathentry kind="var" path="MAVEN_REPO/lucene/jars/lucene-core-1.9.1.jar"/>
+	<classpathentry kind="var" path="MAVEN_REPO/lucene/jars/lucene-core-1.9.1.jar" sourcepath="/MAVEN_REPO/lucene/jars/lucene-1.9.1-src.zip"/>
 	<classpathentry kind="var" path="MAVEN_REPO/commons-dbcp/jars/commons-dbcp-1.2.1.jar"/>
 	<classpathentry kind="var" path="MAVEN_REPO/commons-pool/jars/commons-pool-1.3.jar"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/db-impl"/>
 	<classpathentry kind="var" path="MAVEN_REPO/commons-httpclient/jars/commons-httpclient-3.0.jar"/>
 	<classpathentry kind="var" path="MAVEN_REPO/commons-codec/jars/commons-codec-1.3.jar"/>
+	<classpathentry kind="var" path="MAVEN_REPO/jmock/jars/jmock-cglib-1.1.0.jar"/>
+	<classpathentry kind="var" path="MAVEN_REPO/jmock/jars/jmock-1.1.0.jar"/>
+	<classpathentry kind="var" path="MAVEN_REPO/cglib/jars/cglib-full-2.0.2.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
Index: search/search-impl/impl/project.xml
===================================================================
--- search/search-impl/impl/project.xml	(revision 21914)
+++ search/search-impl/impl/project.xml	(working copy)
@@ -222,18 +222,30 @@
       <version>0.7.1</version>
       <type>jar</type>
     </dependency>
-           <dependency>
+    <dependency>
       <groupId>commons-codec</groupId>
       <artifactId>commons-codec</artifactId>
       <version>1.3</version>
       <type>jar</type>
     </dependency>
-           <dependency>
+    <dependency>
       <groupId>commons-httpclient</groupId>
       <artifactId>commons-httpclient</artifactId>
       <version>3.0</version>
       <type>jar</type>
     </dependency>
+   <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>3.8.1</version>
+      <type>jar</type>
+    </dependency>
+   <dependency>
+      <groupId>jmock</groupId>
+      <artifactId>jmock-cglib</artifactId>
+      <version>1.1.0</version>
+      <type>jar</type>
+    </dependency>
   </dependencies>
 </project>
 
Index: search/search-impl/impl/src/test/org/sakai/search/index/impl/test/SearchListResponseTest.java
===================================================================
--- search/search-impl/impl/src/test/org/sakai/search/index/impl/test/SearchListResponseTest.java	(revision 21914)
+++ search/search-impl/impl/src/test/org/sakai/search/index/impl/test/SearchListResponseTest.java	(working copy)
@@ -152,5 +152,62 @@
 			log.info("    Field Names:"+sr.getFieldNames());
 		}
 	}
+	
+	public void testResultsSetEscape() throws Exception {
+		String testString = 
+			"<?xml version=\"1.0\"?>" +
+			"<results  fullsize=\"17\"  start=\"11\"  size=\"9\"  >" +
+			"<result index=\"11\"  score=\"0.99999994\"  " +
+			"sid=\"/site/97c4d057-9de3-49db-80df-421b2d05ed52/page11\"  " +
+			"reference=\"/wiki/site/97c4d057-9de3-49db-80df-421b2d05ed52/page11.\"  " +
+			"title=\"L3NpdGUvOTdjNGQwNTctOWRlMy00OWRiLTgwZGYtNDIxYjJkMDVlZDUyL3BhZ2UxMQ==\"  " +
+			"tool=\"wiki\" " +
+			" url=\"http://localhost:8088/access/wiki/site/97c4d057-9de3-49db-80df-421b2d05ed52/page11 &amp; page12.html\" />" +
+			"<result index=\"12\"  score=\"0.99999994\"  " +
+			"sid=\"/site/97c4d057-9de3-49db-80df-421b2d05ed52/page12\"  " +
+			"reference=\"/wiki/site/97c4d057-9de3-49db-80df-421b2d05ed52/page12.\"  " +
+			"title=\"L3NpdGUvOTdjNGQwNTctOWRlMy00OWRiLTgwZGYtNDIxYjJkMDVlZDUyL3BhZ2UxMg==\"  " +
+			"tool=\"wiki\" " +
+			" url=\"http://localhost:8088/access/wiki/site/97c4d057-9de3-49db-80df-421b2d05ed52/page12.html\" />" +
+			"<result index=\"13\"  " +
+			"score=\"0.99999994\"  sid=\"/site/97c4d057-9de3-49db-80df-421b2d05ed52/page13\"  " +
+			"reference=\"/wiki/site/97c4d057-9de3-49db-80df-421b2d05ed52/page13.\"  " +
+			"title=\"L3NpdGUvOTdjNGQwNTctOWRlMy00OWRiLTgwZGYtNDIxYjJkMDVlZDUyL3BhZ2UxMw==\"  " +
+			"tool=\"wiki\"  url=\"http://localhost:8088/access/wiki/site/97c4d057-9de3-49db-80df-421b2d05ed52/page13.html\" />" +
+			"<result index=\"14\"  " +
+			"score=\"0.99999994\"  sid=\"/site/97c4d057-9de3-49db-80df-421b2d05ed52/page14\"  " +
+			"reference=\"/wiki/site/97c4d057-9de3-49db-80df-421b2d05ed52/page14.\"  " +
+			"title=\"L3NpdGUvOTdjNGQwNTctOWRlMy00OWRiLTgwZGYtNDIxYjJkMDVlZDUyL3BhZ2UxNA==\"  " +
+			"tool=\"wiki\"  " +
+			"url=\"http://localhost:8088/access/wiki/site/97c4d057-9de3-49db-80df-421b2d05ed52/page14.html\" />" +
+			"<result index=\"15\"  " +
+			"score=\"0.99999994\"  sid=\"/site/97c4d057-9de3-49db-80df-421b2d05ed52/page15\"  " +
+			"reference=\"/wiki/site/97c4d057-9de3-49db-80df-421b2d05ed52/page15.\"  " +
+			"title=\"L3NpdGUvOTdjNGQwNTctOWRlMy00OWRiLTgwZGYtNDIxYjJkMDVlZDUyL3BhZ2UxNQ==\"  " +
+			"tool=\"wiki\"  " +
+			"url=\"http://localhost:8088/access/wiki/site/97c4d057-9de3-49db-80df-421b2d05ed52/page15.html\" />" +
+			"<result index=\"16\"  " +
+			"score=\"0.5273437\"  sid=\"/site/97c4d057-9de3-49db-80df-421b2d05ed52/home\"  " +
+			"reference=\"/wiki/site/97c4d057-9de3-49db-80df-421b2d05ed52/home.\"  " +
+			"title=\"L3NpdGUvOTdjNGQwNTctOWRlMy00OWRiLTgwZGYtNDIxYjJkMDVlZDUyL2hvbWU=\"  " +
+			"tool=\"wiki\"  " +
+			"url=\"http://localhost:8088/access/wiki/site/97c4d057-9de3-49db-80df-421b2d05ed52/home.html\" />" +
+			"</results>";
+		SearchItemFilter filter = new NullSearchFilter();
+		SearchListReponseImpl slri = new SearchListReponseImpl(testString,
+				null, 0, 10, null, filter, null, null, null);
+		for ( Iterator i = slri.iterator(); i.hasNext(); ) {
+			SearchResult sr = (SearchResult) i.next();
+			log.info("    Id         :"+sr.getId());
+			log.info("    Index      :"+sr.getIndex());
+			log.info("    Reference  :"+sr.getReference());
+			log.info("    Score      :"+sr.getScore());
+			log.info("    Title      :"+sr.getTitle());
+			log.info("    Tool       :"+sr.getTool());
+			log.info("    Url        :"+sr.getUrl());
+			log.info("    Terms      :"+sr.getTerms());
+			log.info("    Field Names:"+sr.getFieldNames());
+		}
+	}
 
 }
Index: search/search-impl/impl/src/java/org/sakaiproject/search/component/service/impl/SearchListReponseImpl.java
===================================================================
--- search/search-impl/impl/src/java/org/sakaiproject/search/component/service/impl/SearchListReponseImpl.java	(revision 21914)
+++ search/search-impl/impl/src/java/org/sakaiproject/search/component/service/impl/SearchListReponseImpl.java	(working copy)
@@ -100,6 +100,10 @@
 		this.searchIndexBuilder = searchIndexBuilder;
 		this.searchService = searchService;
 
+		if (log.isDebugEnabled()) {
+			log.debug("search response: ["+response+"]");
+		}
+		
 		XMLReader xr = XMLReaderFactory.createXMLReader();
 		xr.setContentHandler(this);
 		InputSource is = new InputSource(new StringReader(response));
Index: search/search-impl/impl/src/java/org/sakaiproject/search/component/service/impl/SearchResultResponseImpl.java
===================================================================
--- search/search-impl/impl/src/java/org/sakaiproject/search/component/service/impl/SearchResultResponseImpl.java	(revision 21914)
+++ search/search-impl/impl/src/java/org/sakaiproject/search/component/service/impl/SearchResultResponseImpl.java	(working copy)
@@ -46,6 +46,7 @@
 import org.sakaiproject.search.api.SearchService;
 import org.sakaiproject.search.api.TermFrequency;
 import org.sakaiproject.search.component.Messages;
+//import org.sakaiproject.search.component.service.impl.StringUtils;
 import org.xml.sax.Attributes;
 
 
@@ -85,6 +86,7 @@
 		this.searchIndexBuilder = searchIndexBuilder;
 		this.searchService = searchService;
 	}
+	
 	public SearchResultResponseImpl(Attributes atts, Query query,
 			Analyzer analyzer, EntityManager entityManager,
 			SearchIndexBuilder searchIndexBuilder, SearchService searchService)
@@ -92,18 +94,23 @@
 	{
 		Map m = new HashMap();
 		for ( int i = 0; i < atts.getLength(); i++ ) {
-			m.put(atts.getLocalName(i),atts.getValue(i));
+			String attributeName = atts.getLocalName(i);
+			String value = atts.getValue(i);
+			m.put(attributeName, value);
 		}
-		try
-		{
-			String title = (String)m.get("title"); //$NON-NLS-1$
-			if ( title != null ) {
-				m.put("title", new String(Base64.decodeBase64(title.getBytes("UTF-8")),"UTF-8")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
-			}
-		}
-		catch (UnsupportedEncodingException e)
-		{
-		}
+		
+		// The text values for the results are send in base64 to ensure that characters in valid
+		// strings get across ok without screwing up the Xml.  Some files contain a '&' in the
+		// file name.
+		
+		// decode the base64 values
+
+		decodeMapAttribute(m, "sid");
+		decodeMapAttribute(m, "reference");
+		decodeMapAttribute(m, "title");
+		decodeMapAttribute(m, "tool");
+		decodeMapAttribute(m, "url");
+
 		this.attributes = m;
 		this.query = query;
 		this.analyzer = analyzer;
@@ -112,6 +119,14 @@
 		this.searchService = searchService;
 	}
 
+	protected void decodeMapAttribute(Map m, String attributeName) {
+		String value;
+		value = (String)m.get(attributeName); //$NON-NLS-1$
+		if (value != null) {
+				m.put(attributeName, base64UTF8SafeDecodeText(value));
+		}
+	}
+	
 	public float getScore()
 	{
 		return Float.parseFloat((String)attributes.get("score")); //$NON-NLS-1$
@@ -217,25 +232,66 @@
 	{
 		return null;
 	}
-
+	
 	public void toXMLString(StringBuffer sb)
 	{
 		sb.append("<result"); //$NON-NLS-1$
 		sb.append(" index=\"").append(getIndex()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
 		sb.append(" score=\"").append(getScore()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
-		sb.append(" sid=\"").append(getId()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
-		sb.append(" reference=\"").append(getReference()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
+		
+		xmlSafeEncodeAttributeText(sb,"sid",getId()); //$NON-NLS-1$ //$NON-NLS-2$
+		xmlSafeEncodeAttributeText(sb,"reference",getReference()); //$NON-NLS-1$ //$NON-NLS-2$
+		xmlSafeEncodeAttributeText(sb,"title", getTitle());
+		xmlSafeEncodeAttributeText(sb,"tool",getTool());
+		xmlSafeEncodeAttributeText(sb,"url",getUrl());
+		sb.append(" />");
+	}
+	
+	// Encode the text for an attribute and return the attribute.
+	static protected StringBuffer xmlSafeEncodeAttributeText(StringBuffer sb, String attributeName, String text) {
+		return sb.append(" ").append(attributeName).append("=\"")
+			.append(base64UTF8SafeEncodeText(text)).append("\"");
+	}
+
+	// Encode some text in base64 / UTF-8
+	static protected String base64UTF8SafeEncodeText(String text) {
+		String value = null;
+		value = text;
+		
+		if ((value == null) || (value.length() == 0)) {
+			return null;
+		}
+		
 		try
 		{
-			sb.append(" title=\"").append( //$NON-NLS-1$
-					new String(Base64.encodeBase64(getTitle().getBytes("UTF-8")),"UTF-8")).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+			value = new String(Base64.encodeBase64(text.getBytes("UTF-8")),"UTF-8"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 		}
 		catch (UnsupportedEncodingException e)
 		{
-			sb.append(" title=\"").append(getTitle()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
 		}
-		sb.append(" tool=\"").append(getTool()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
-		sb.append(" url=\"").append(getUrl()).append("\" />"); //$NON-NLS-1$ //$NON-NLS-2$
+			
+		return value;
 	}
+	
+	// Decode some text in base64 / UTF-8
+	static protected String base64UTF8SafeDecodeText(String text) {
+		String value = null;
+		value = text;
+		
+		if ((value == null) || (value.length() == 0)) {
+			return null;
+		}
+		
+		try
+		{
+			value = new String(Base64.decodeBase64(text.getBytes("UTF-8")),"UTF-8"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+		}
+		catch (UnsupportedEncodingException e)
+		{
+		}
 
+		
+		return value;
+	}
+	
 }
Index: search/search-impl/impl/src/java/org/sakaiproject/search/component/service/impl/SearchResultImpl.java
===================================================================
--- search/search-impl/impl/src/java/org/sakaiproject/search/component/service/impl/SearchResultImpl.java	(revision 21914)
+++ search/search-impl/impl/src/java/org/sakaiproject/search/component/service/impl/SearchResultImpl.java	(working copy)
@@ -105,7 +105,7 @@
 
 	public String getId()
 	{
-		return doc.get(SearchService.FIELD_ID);
+		return StringUtils.escapeHtml(doc.get(SearchService.FIELD_ID),false);
 	}
 
 	public String[] getFieldNames()
@@ -150,7 +150,8 @@
 
 	public String getUrl()
 	{
-		return doc.get(SearchService.FIELD_URL);
+		return StringUtils.
+			escapeHtml(doc.get(SearchService.FIELD_URL),false);
 	}
 
 	public String getTitle()
@@ -208,7 +209,7 @@
 
 	public String getReference()
 	{
-		return doc.get(SearchService.FIELD_REFERENCE);
+		return StringUtils.escapeHtml(doc.get(SearchService.FIELD_REFERENCE),false);
 	}
 
 	public TermFrequency getTerms() throws IOException
@@ -221,19 +222,34 @@
 		sb.append("<result"); //$NON-NLS-1$
 		sb.append(" index=\"").append(getIndex()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
 		sb.append(" score=\"").append(getScore()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
-		sb.append(" sid=\"").append(getId()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
-		sb.append(" reference=\"").append(getReference()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
-		try
-		{
-			sb.append(" title=\"").append( //$NON-NLS-1$
-					new String(Base64.encodeBase64(getTitle().getBytes("UTF-8")),"UTF-8")).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
-		}
-		catch (UnsupportedEncodingException e)
-		{
-			sb.append(" title=\"").append(getTitle()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
-		}
-		sb.append(" tool=\"").append(getTool()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
-		sb.append(" url=\"").append(getUrl()).append("\" />"); //$NON-NLS-1$ //$NON-NLS-2$
+		
+		SearchResultResponseImpl.xmlSafeEncodeAttributeText(sb,"sid",getId()); //$NON-NLS-1$ //$NON-NLS-2$
+		SearchResultResponseImpl.xmlSafeEncodeAttributeText(sb,"reference",getReference()); //$NON-NLS-1$ //$NON-NLS-2$
+		SearchResultResponseImpl.xmlSafeEncodeAttributeText(sb,"title", getTitle());
+		SearchResultResponseImpl.xmlSafeEncodeAttributeText(sb,"tool",getTool());
+		SearchResultResponseImpl.xmlSafeEncodeAttributeText(sb,"url",getUrl());
+		sb.append(" />");
 	}
+	
+//	public void toXMLString(StringBuffer sb)
+//	{
+//		sb.append("<result"); //$NON-NLS-1$
+//		sb.append(" index=\"").append(getIndex()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
+//		sb.append(" score=\"").append(getScore()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
+////		sb.append(" <=\"").append(getId()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
+//		sb.append(" sid=\"").append(getId()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
+//		sb.append(" reference=\"").append(getReference()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
+//		try
+//		{
+//			sb.append(" title=\"").append( //$NON-NLS-1$
+//					new String(Base64.encodeBase64(getTitle().getBytes("UTF-8")),"UTF-8")).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+//		}
+//		catch (UnsupportedEncodingException e)
+//		{
+//			sb.append(" title=\"").append(getTitle()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
+//		}
+//		sb.append(" tool=\"").append(getTool()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
+//		sb.append(" url=\"").append(getUrl()).append("\" />"); //$NON-NLS-1$ //$NON-NLS-2$
+//	}
 
 }
Index: search/search-impl/impl/src/java/org/sakaiproject/search/component/service/impl/SearchServiceImpl.java
===================================================================
--- search/search-impl/impl/src/java/org/sakaiproject/search/component/service/impl/SearchServiceImpl.java	(revision 21914)
+++ search/search-impl/impl/src/java/org/sakaiproject/search/component/service/impl/SearchServiceImpl.java	(working copy)
@@ -339,9 +339,15 @@
 			BooleanQuery contextQuery = new BooleanQuery();
 			for (Iterator i = contexts.iterator(); i.hasNext();)
 			{
+				// Setup query so that it will allow results from any
+				// included site, not all included sites.
 				contextQuery.add(new TermQuery(new Term(
-						SearchService.FIELD_SITEID, (String) i.next())),
-						BooleanClause.Occur.MUST);
+				SearchService.FIELD_SITEID, (String) i.next())),
+				BooleanClause.Occur.SHOULD);
+				// This would require term to be in all sites :-(
+//				contextQuery.add(new TermQuery(new Term(
+//						SearchService.FIELD_SITEID, (String) i.next())),
+//						BooleanClause.Occur.MUST);
 			}
 
 			QueryParser qp = new QueryParser(SearchService.FIELD_CONTENTS,
Index: search/search-impl/pack/src/webapp/WEB-INF/coreSearchComponents.xml
===================================================================
--- search/search-impl/pack/src/webapp/WEB-INF/coreSearchComponents.xml	(revision 21914)
+++ search/search-impl/pack/src/webapp/WEB-INF/coreSearchComponents.xml	(working copy)
@@ -140,6 +140,7 @@
     class="org.sakaiproject.search.index.impl.FSIndexStorage" 
     init-method="init" >
     <property name="location"><value>${sakai.home}searchindex</value></property>
+    <property name="recoverCorruptedIndex"><value>true</value></property>
     <property name="analyzerFactory" ><ref bean="org.sakaiproject.search.index.AnalyzerFactory" /></property>    
   </bean>
 
