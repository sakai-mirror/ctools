Index: calendar/calendar-impl/impl/src/java/org/sakaiproject/calendar/impl/BaseCalendarService.java
===================================================================
--- calendar/calendar-impl/impl/src/java/org/sakaiproject/calendar/impl/BaseCalendarService.java	(revision 33838)
+++ calendar/calendar-impl/impl/src/java/org/sakaiproject/calendar/impl/BaseCalendarService.java	(revision 33839)
@@ -2306,16 +2306,7 @@
 
 			if ((!m_caching) || (m_calendarCache == null) || (m_calendarCache.disabled()))
 			{
-				// TODO: do we really want to do this? -ggolden
-				// if we have done this already in this thread, use that
-				events = (List) ThreadLocalManager.get(getReference() + ".events");
-				if (events == null)
-				{
-					events = m_storage.getEvents(this);
-
-					// "cache" the events in the current service in case they are needed again in this thread...
-					ThreadLocalManager.set(getReference() + ".events", events);
-				}
+				events = m_storage.getEvents(this, range.firstTime().toStringSql(), range.lastTime().toStringSql() );
 			}
 
 			else
Index: calendar/calendar-impl/impl/src/sql/mysql/SAK-11204.sql
===================================================================
--- calendar/calendar-impl/impl/src/sql/mysql/SAK-11204.sql	(revision 0)
+++ calendar/calendar-impl/impl/src/sql/mysql/SAK-11204.sql	(revision 34337)
@@ -0,0 +1,8 @@
+-- Force this to happen and report problems bu having a non failing SQL statement first
+SELECT 1;
+
+ALTER TABLE CALENDAR_EVENT ADD COLUMN RANGE_START INTEGER, ADD COLUMN RANGE_END INTEGER ;
+
+CREATE INDEX CALENDAR_EVENT_RSTART ON CALENDAR_EVENT(RANGE_START);
+CREATE INDEX CALENDAR_EVENT_REND ON CALENDAR_EVENT(RANGE_END);
+

Property changes on: calendar/calendar-impl/impl/src/sql/mysql/SAK-11204.sql
___________________________________________________________________
Name: svn:eol-style
   + native
Name: svn:keywords
   + Date Revision Author HeadURL Id

Index: calendar/calendar-impl/impl/src/sql/oracle/SAK-11204.sql
===================================================================
--- calendar/calendar-impl/impl/src/sql/oracle/SAK-11204.sql	(revision 0)
+++ calendar/calendar-impl/impl/src/sql/oracle/SAK-11204.sql	(revision 34337)
@@ -0,0 +1,8 @@
+-- Force this to happen and report problems bu having a non failing SQL statement first
+SELECT 1 FROM DUAL;
+
+ALTER TABLE CALENDAR_EVENT ADD COLUMN(RANGE_START INTEGER), COLUMN(RANGE_END INTEGER);
+
+CREATE INDEX CALENDAR_EVENT_RSTART ON CALENDAR_EVENT(RANGE_START);
+CREATE INDEX CALENDAR_EVENT_REND ON CALENDAR_EVENT(RANGE_END);
+

Property changes on: calendar/calendar-impl/impl/src/sql/oracle/SAK-11204.sql
___________________________________________________________________
Name: svn:eol-style
   + native
Name: svn:keywords
   + Date Revision Author HeadURL Id

Index: calendar/calendar-impl/impl/src/sql/hsqldb/SAK-11204.sql
===================================================================
--- calendar/calendar-impl/impl/src/sql/hsqldb/SAK-11204.sql	(revision 0)
+++ calendar/calendar-impl/impl/src/sql/hsqldb/SAK-11204.sql	(revision 34337)
@@ -0,0 +1,9 @@
+-- Force this to happen and report problems bu having a non failing SQL statement first
+SELECT 1;
+
+
+ALTER TABLE CALENDAR_EVENT ADD COLUMN RANGE_START INTEGER;
+ALTER TABLE CALENDAR_EVENT ADD COLUMN RANGE_END INTEGER;
+
+CREATE INDEX CALENDAR_EVENT_RSTART ON CALENDAR_EVENT(RANGE_START);
+CREATE INDEX CALENDAR_EVENT_REND ON CALENDAR_EVENT(RANGE_END);

Property changes on: calendar/calendar-impl/impl/src/sql/hsqldb/SAK-11204.sql
___________________________________________________________________
Name: svn:eol-style
   + native
Name: svn:keywords
   + Date Revision Author HeadURL Id

Index: calendar/calendar-impl/impl/src/java/org/sakaiproject/calendar/impl/DbCalendarService.java
===================================================================
--- calendar/calendar-impl/impl/src/java/org/sakaiproject/calendar/impl/DbCalendarService.java	(revision 34336)
+++ calendar/calendar-impl/impl/src/java/org/sakaiproject/calendar/impl/DbCalendarService.java	(revision 34337)
@@ -21,6 +21,8 @@
 
 package org.sakaiproject.calendar.impl;
 
+import java.sql.Date;
+import java.util.GregorianCalendar;
 import java.util.List;
 
 import org.apache.commons.logging.Log;
@@ -53,7 +55,7 @@
 	/** If true, we do our locks in the remote database, otherwise we do them here. */
 	protected boolean m_locksInDb = true;
 
-	protected static final String[] FIELDS = { "EVENT_START", "EVENT_END" };
+	protected static final String[] FIELDS = { "EVENT_START", "EVENT_END", "RANGE_START", "RANGE_END" };
 
 	/*******************************************************************************
 	* Constructors, Dependencies and their setter methods
@@ -130,6 +132,9 @@
 			}
 
 			super.init();
+			
+			SAK11204Fix sf =  new SAK11204Fix(this);
+			sf.apply();
 
 			M_log.info("init(): tables: " + m_cTableName + " " + m_rTableName + " locks-in-db: " + m_locksInDb);
 		}
@@ -211,6 +216,41 @@
 		public List getEvents(Calendar calendar)
 			{ return super.getAllResources(calendar); }
 
+		public List getEvents(Calendar calendar, long startDate, long endDate)
+         { 
+			// we dont have acurate timezone information at this point, so we will make certain that we are at the start of the GMT day
+			long oneHour = 60L*60L*1000L;
+			long oneDay = 24L*oneHour;
+			// get to the start of the GMT day
+			startDate = startDate - (startDate%oneDay);
+			// get to the end of the GMT day
+			endDate = endDate + (oneDay-(endDate%oneDay));  
+			// this will work untill 9 Oct 246953 07:00:00
+			int startDateHours = (int)(startDate/oneHour);
+			int endDateHours = (int)(endDate/oneHour);
+			
+			if ( M_log.isErrorEnabled() ) {
+				M_log.debug("Selecting Range from "+(new Date(startDate)).toGMTString()+" to "+(new Date(endDate)).toGMTString());
+			}
+            StringBuffer filter = new StringBuffer("(");
+            filter.append(" (RANGE_START > ");
+            filter.append( startDateHours );
+            filter.append( " and RANGE_START < ");
+            filter.append( endDateHours );
+            filter.append( " ) or ( ");
+            filter.append(" RANGE_END > ");
+            filter.append( startDateHours );
+            filter.append( " and RANGE_END < ");
+            filter.append( endDateHours );
+            filter.append( " ) or ( ");
+            filter.append(" RANGE_START < ");
+            filter.append( startDateHours );
+            filter.append( " and RANGE_END > ");
+            filter.append( endDateHours );
+            filter.append( " )) ");
+            return super.getAllResources(calendar, filter.toString()); 
+         }
+
 		public CalendarEventEdit putEvent(Calendar calendar,String id)
 			{ return (CalendarEventEdit) super.putResource(calendar, id, null); }
 
Index: calendar/calendar-impl/impl/src/java/org/sakaiproject/calendar/impl/BaseCalendarService.java
===================================================================
--- calendar/calendar-impl/impl/src/java/org/sakaiproject/calendar/impl/BaseCalendarService.java	(revision 34336)
+++ calendar/calendar-impl/impl/src/java/org/sakaiproject/calendar/impl/BaseCalendarService.java	(revision 34337)
@@ -2315,7 +2315,7 @@
 
 			if ((!m_caching) || (m_calendarCache == null) || (m_calendarCache.disabled()))
 			{
-				events = m_storage.getEvents(this, range.firstTime().toStringSql(), range.lastTime().toStringSql() );
+				events = m_storage.getEvents(this, range.firstTime().getTime(), range.lastTime().getTime() );
 			}
 
 			else
@@ -4900,6 +4900,11 @@
 		public List getEvents(Calendar calendar);
 
 		/**
+		 * Get the events from a calendar, within this time range
+		 */
+		public List getEvents(Calendar calendar, long l, long m);
+      
+		/**
 		 * Make and lock a new event.
 		 */
 		public CalendarEventEdit putEvent(Calendar calendar, String id);
@@ -5148,11 +5153,38 @@
 	 */
 	public Object[] storageFields(Entity r)
 	{
-		Object[] rv = new Object[2];
+		Object[] rv = new Object[4];
 		TimeRange range = ((CalendarEvent) r).getRange();
 		rv[0] = range.firstTime(); // %%% fudge?
 		rv[1] = range.lastTime(); // %%% fudge?
+		
+		// we use hours rather than ms for the range to reduce the index size in the database
+		// I dont what to use days just incase we want sub day range finds
+		long oneHour = 60L*60L*1000L;
+		rv[2] = (int)(range.firstTime().getTime()/oneHour);
+		rv[3] = (int)(range.lastTime().getTime()/oneHour);
 
+		// find the end of the sequence
+		RecurrenceRuleBase rr = (RecurrenceRuleBase)((CalendarEvent) r).getRecurrenceRule();
+		if ( rr != null ) {
+			Time until = rr.getUntil();
+			if ( until != null ) {
+				rv[3] = (int)(until.getTime()/oneHour);
+			} else {
+				int count = rr.getCount();
+				int interval = rr.getInterval();
+				long endevent = range.lastTime().getTime();
+				if ( count == 0 ) {
+					rv[3] = Integer.MAX_VALUE-1; // hours since epoch, this represnts 9 Oct 246953 07:00:00
+ 				} else {
+					String frequency = rr.getFrequencyDescription();
+					GregorianCalendar c = new GregorianCalendar();
+					c.setTimeInMillis(endevent);
+					c.add(rr.getRecurrenceType(), count*interval);
+					rv[3] = (int)(c.getTimeInMillis()/oneHour);
+				}
+			}
+		}
 		return rv;
 	}
 
Index: calendar/calendar-impl/impl/src/java/org/sakaiproject/calendar/impl/SAK11204Fix.java
===================================================================
--- calendar/calendar-impl/impl/src/java/org/sakaiproject/calendar/impl/SAK11204Fix.java	(revision 0)
+++ calendar/calendar-impl/impl/src/java/org/sakaiproject/calendar/impl/SAK11204Fix.java	(revision 34337)
@@ -0,0 +1,207 @@
+/**********************************************************************************
+ * $URL$
+ * $Id$
+ ***********************************************************************************
+ *
+ * Copyright (c) 2003, 2004, 2005, 2006, 2007 The Sakai Foundation.
+ *
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.opensource.org/licenses/ecl1.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ **********************************************************************************/
+
+package org.sakaiproject.calendar.impl;
+
+import java.sql.Connection;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.Iterator;
+import java.util.List;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.sakaiproject.calendar.api.Calendar;
+import org.sakaiproject.calendar.impl.BaseCalendarService.BaseCalendarEventEdit;
+import org.sakaiproject.component.api.ServerConfigurationService;
+import org.sakaiproject.db.api.SqlService;
+
+/**
+ * @author ieb
+ */
+public class SAK11204Fix
+{
+	private static final Log log = LogFactory.getLog(SAK11204Fix.class);
+
+	private static final int MIGRATE = 1;
+
+	private static final int UPGRADE_SCHEMA = 2;
+
+	private static final int OK = 0;
+
+	private SqlService sqlService;
+
+	private ServerConfigurationService serverConfigurationService;
+
+	private BaseCalendarService.Storage storage;
+
+	/**
+	 * @param service
+	 */
+	public SAK11204Fix(DbCalendarService service)
+	{
+		this.sqlService = service.m_sqlService;
+		this.serverConfigurationService = service.m_serverConfigurationService;
+		this.storage = service.m_storage;
+	}
+
+	/**
+	 * 
+	 */
+	public void apply()
+	{
+		int upgrade = checkSAK11204ForUpgrade();
+
+		if (upgrade != OK)
+		{
+			log.info("SAK-11204: Updating Schema ");
+			sqlService.ddl(this.getClass().getClassLoader(), "SAK-11204");
+			if (checkSAK11204ForUpgrade() == UPGRADE_SCHEMA )
+			{
+				log
+						.fatal("SAK-11204: =============================================================================");
+				log
+						.fatal("SAK-11204: Database Patch for SAK-11204 Failed, you must investigate and fix before");
+				log
+						.fatal("SAK-11204: continuuing. I attempted to upgrade the schema but this appears to hav failed. You must");
+				log
+						.fatal("SAK-11204: ensure that the columns RANGE_START(BIGINT) and RANGE_END(BIGINT) are present in CALENDAR_EVENT");
+				log.fatal("SAK-11204: and there are indexes on both of the columns.");
+				log
+						.fatal("SAK-11204: Then you MUST set  sak11204.forceupgrade=true in sakai properties to perform the datamigration for ");
+				log.fatal("SAK-11204: one time only.");
+				log.fatal("SAK-11204: Thank you ");
+				log
+						.fatal("SAK-11204: =============================================================================");
+				System.exit(-10);
+			}
+			log.info("SAK-11204: Schema Update Sucessfull ");
+		}
+		boolean forceUpgrade = serverConfigurationService.getBoolean(
+				"sak11204.forceupgrade", false);
+		if (upgrade  != OK || forceUpgrade)
+		{
+			// get a list of channels
+			// for each channel get a list of events
+			// for each event save
+			// do this all at the storage layer so that we dont change the
+			// calendars
+			List<Calendar> calendars = storage.getCalendars();
+			int i = 1;
+			for (Iterator<Calendar> icalendars = calendars.iterator(); icalendars
+					.hasNext();)
+			{
+				log.info("SAK-11204: Converting Calendar "+i+" of " + calendars.size());
+				i++;
+				Calendar calendar = icalendars.next();
+				List<BaseCalendarEventEdit> levents = storage.getEvents(calendar);
+				for (Iterator<BaseCalendarEventEdit> ievents = levents.iterator(); ievents
+						.hasNext();)
+				{
+					BaseCalendarEventEdit event = ievents.next();
+					event.activate();
+					storage.commitEvent(calendar, event);
+				}
+			}
+		}
+		log.info("SAK-11204: Calendar Conversion Complete ");
+		if (forceUpgrade)
+		{
+			log
+					.warn("SAK-11204: =========================================================================================================  ");
+			log
+					.warn("SAK-11204: This Conversion was forced, please ensure that you remove sak11204.forceupgrade from sakai.properties ");
+			log
+					.warn("SAK-11204: If you do not remove sak11204.forceupgrade from sakai.properties this conversion will be performed ");
+			log
+					.warn("SAK-11204: every time you start this instance of sakai, and it will take the same ammount of time ");
+			log
+					.warn("SAK-11204: =========================================================================================================  ");
+		}
+
+	}
+
+	/**
+	 * Runs a simple SQL statement to check if the databse has been patched
+	 * 
+	 * @return
+	 */
+	private int checkSAK11204ForUpgrade()
+	{
+
+		{
+			String test = "select RANGE_START from CALENDAR_EVENT where (RANGE_START is null) or (RANGE_START is null)  ";
+			Connection connection = null;
+			Statement s = null;
+			ResultSet rs = null;
+
+			try
+			{
+				connection = sqlService.borrowConnection();
+				s = connection.createStatement();
+				rs = s.executeQuery(test);
+				if (rs.next())
+				{
+					log.info("SAK-11204: Migration check, there are null range fields ");
+					return MIGRATE;
+				}
+			}
+			catch (SQLException ex)
+			{
+				log
+						.info("SAK-11204: Migration check, CALENDAR_EVENT schema not uptodate, test query said:  "
+								+ ex.getMessage());
+				return UPGRADE_SCHEMA;
+			}
+			finally
+			{
+				try
+				{
+					rs.close();
+				}
+				catch (Exception ex)
+				{
+				}
+				try
+				{
+					s.close();
+				}
+				catch (Exception ex)
+				{
+				}
+				try
+				{
+					if (connection != null)
+					{
+						sqlService.returnConnection(connection);
+					}
+				}
+				catch (Exception ex)
+				{
+				}
+			}
+		}
+		log.debug("SAK-11204: Database has been migrated  ");
+		return OK;
+	}
+
+}

Property changes on: calendar/calendar-impl/impl/src/java/org/sakaiproject/calendar/impl/SAK11204Fix.java
___________________________________________________________________
Name: svn:eol-style
   + native
Name: svn:keywords
   + Date Revision Author HeadURL Id

