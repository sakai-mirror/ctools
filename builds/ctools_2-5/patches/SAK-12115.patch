--- /dev/null	2008-04-22 13:49:52.000000000 -0400
+++ rwiki/rwiki-impl/impl/src/test/uk/ac/cam/caret/sakai/rwiki/component/service/impl/test/RWikiObjectServiceImplTest.java	2008-08-18 16:40:13.000000000 -0400
@@ -0,0 +1,112 @@
+/**********************************************************************************
+ * $URL$
+ * $Id$
+ ***********************************************************************************
+ *
+ * Copyright (c) 2003, 2004, 2005, 2006, 2007 The Sakai Foundation.
+ *
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.opensource.org/licenses/ecl1.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ **********************************************************************************/
+
+
+package uk.ac.cam.caret.sakai.rwiki.component.service.impl.test;
+
+import java.util.HashSet;
+
+import uk.ac.cam.caret.sakai.rwiki.component.service.impl.RWikiObjectServiceImpl;
+import uk.ac.cam.caret.sakai.rwiki.model.RWikiCurrentObjectImpl;
+import junit.framework.TestCase;
+
+public class RWikiObjectServiceImplTest extends TestCase {
+
+	RWikiObjectServiceImpl rwosi = null;
+	RWikiCurrentObjectImpl rwco = new RWikiCurrentObjectImpl();
+	
+	public RWikiObjectServiceImplTest(String arg0) {
+		super(arg0);
+	}
+
+	protected void setUp() throws Exception {
+		super.setUp();
+		rwosi = new RWikiObjectServiceImpl();
+	}
+
+	protected void tearDown() throws Exception {
+		super.tearDown();
+	}
+
+	public void testExtractReferencesEmptyConstructor() {
+		assertNotNull(rwosi);
+	}
+	
+	// can deal with page with no references
+	public void testExtractReferencesExtractReferencesEmpty() {
+		rwco = new RWikiCurrentObjectImpl();
+		HashSet hs = new HashSet();
+		StringBuffer sb = rwosi.extractReferences(rwco, hs);
+		assert(sb.length() == 2);
+	}
+
+	// can deal with page with one references
+	public void testExtractReferencesExtractReferencesOneReference() {
+		rwco = new RWikiCurrentObjectImpl();
+		HashSet<String> hs = new HashSet<String>();
+		hs.add("oneReference");
+		StringBuffer sb = rwosi.extractReferences(rwco, hs);
+		assertEquals("one reference string",16,sb.length());
+	}
+	
+	// can deal with page with multiple references
+	public void testExtractReferencesExtractReferencesTwoReference() {
+		rwco = new RWikiCurrentObjectImpl();
+		HashSet<String> hs = new HashSet<String>();
+		hs.add("oneReference");
+		hs.add("twoReference");
+		StringBuffer sb = rwosi.extractReferences(rwco, hs);
+		assertEquals("two reference strings",30,sb.length());
+		
+	}
+	
+	// can deal with page with too many references
+	public void testExtractReferencesExtractReferencesTooLong() {
+		StringBuffer sb;
+		rwco = new RWikiCurrentObjectImpl();
+		HashSet<String> hs = new HashSet<String>();
+		
+		hs.add(longString(3990));
+		sb = rwosi.extractReferences(rwco, hs);
+		assertEquals("two reference strings pass",3994,sb.length());
+		
+		hs.add("A");
+		sb = rwosi.extractReferences(rwco, hs);
+		assertEquals("two reference strings pass",3997,sb.length());
+		
+		hs.add("twoReference");
+		sb = rwosi.extractReferences(rwco, hs);
+		assertEquals("three reference strings last one too long",3997,sb.length());
+
+		
+	}
+	
+	// make an arbitrarily long string
+	String longString(int size) {
+		StringBuffer sb  = new StringBuffer();
+		int i = 0;
+		while(i++ < size) {
+			sb.append("X");
+		}
+		return sb.toString();
+	}
+
+}
Index: rwiki/rwiki-impl/impl/src/java/uk/ac/cam/caret/sakai/rwiki/component/service/impl/RWikiObjectServiceImpl.java
===================================================================
--- rwiki/rwiki-impl/impl/src/java/uk/ac/cam/caret/sakai/rwiki/component/service/impl/RWikiObjectServiceImpl.java	(revision 50845)
+++ rwiki/rwiki-impl/impl/src/java/uk/ac/cam/caret/sakai/rwiki/component/service/impl/RWikiObjectServiceImpl.java	(working copy)
@@ -59,5 +59,6 @@
 import org.sakaiproject.util.StringUtil;
 import org.springframework.orm.hibernate3.HibernateOptimisticLockingFailureException;
+import org.hibernate.HibernateException;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -143,8 +145,9 @@
 
 	private AliasService aliasService;
 
	private UserDirectoryService userDirectoryService;
+	private int maxReferencesStringSize = 4000;

 	/**
 	 * Configuration: to run the ddl on init or not.
 	 * 
@@ -221,6 +228,8 @@
 			log.error("Perform additional SQL setup", ex);
 		}
 		
+		maxReferencesStringSize = ServerConfigurationService.getInt("wiki.maxReferences",4000);
+		
 		log.debug("init end"); //$NON-NLS-1$
 
 	}
@@ -404,7 +413,7 @@
 	 */
 	private void update(String name, String user, String realm, Date version,
 			String content, RWikiPermissions permissions)
-			throws PermissionException, VersionException
+			throws PermissionException, VersionException, RuntimeException
 	{
 
 		// May throw ReadPermissionException...
@@ -471,6 +480,13 @@
 			throw new VersionException("Version has changed since: " + version, //$NON-NLS-1$
 					e);
 		}
+
+		catch (HibernateException e)
+		{
+			log.info("Caught hibernate exception, update failed."+e.getMessage());
+			throw new RuntimeException("An update could not be made to this wiki page. A possible cause is that you have too many links.");
+		}
+
 	}
 
 	public void update(String name, String realm, Date version, String content)
@@ -623,21 +639,38 @@
 			renderService.renderPage(rwo, currentSpace, plr);
 
 			// process the references
-			StringBuffer sb = new StringBuffer();
-			Iterator i = referenced.iterator();
-			while (i.hasNext())
-			{
-				sb.append("::").append(i.next()); //$NON-NLS-1$
-			}
-			sb.append("::"); //$NON-NLS-1$
+			StringBuffer sb = extractReferences(rwo, referenced);
 			rwo.setReferenced(sb.toString());
-
 			return rwho;
 		}
 		return null;
 
 	}
 
+	/**
+	 *  Add page references to the rwiki object.  Limit length of the 
+	 *  string to save to a fixed value that will cover the common cases 
+	 *  without using resources for degenerate cases.
+	 * @param rwo - The rwiki object
+	 * @param referenced - the hash of the references to save.
+	 */
+	public StringBuffer extractReferences(RWikiCurrentObject rwo, final HashSet referenced) {
+		
+		StringBuffer sb = new StringBuffer();
+		Iterator i = referenced.iterator();
+		String next = null;
+		while (i.hasNext())
+		{
+			next = (String) i.next();
+			if (sb.length()+2+next.length() > maxReferencesStringSize) {
+				break;
+			}
+			sb.append("::").append(next); //$NON-NLS-1$
+		}
+		sb.append("::"); //$NON-NLS-1$
+		return sb;
+	}
+
 	public boolean exists(String name, String space)
 	{
 		long start = System.currentTimeMillis();
