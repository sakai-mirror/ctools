Index: content/content-api/api/src/java/org/sakaiproject/content/api/ContentHostingService.java
===================================================================
--- content/content-api/api/src/java/org/sakaiproject/content/api/ContentHostingService.java	(revision 35753)
+++ content/content-api/api/src/java/org/sakaiproject/content/api/ContentHostingService.java	(revision 35755)
@@ -1379,22 +1379,7 @@
 	 * @return List of ContentResource objects that match the search criteria
 	 */
 	public List findResources(String type, String primaryMimeType, String subMimeType);
-
-	  /**
-    * Find the resources this user has read access to from all worksites of the appropriate type.
-    * 
-    * @param type
-    *        this is the ResourceProperties.PROP_STRUCTOBJ_TYPE for stuctured objects or ResourceProperties.FILE_TYPE for file resources or null for all resources.
-    * @param primaryMimeType
-    *        The primary mime type (ie. the "text" of "text/xml") This may be null to include all resources
-    * @param subMimeType
-    *        The sub type (ie, the "xml" of "text/xml") This may be null to include all resources of the primary mime type if specified.
-    * @param accessableOnly
-    *        Flag indicating if only resources this user has read access to should be returned
-    * @return List of ContentResource objects that match the search criteria
-    */
-   public List findResources(String type, String primaryMimeType, String subMimeType, boolean accessableOnly);
-   
+  
 	/**
 	 * Return a map of Worksite collections roots that the user has access to.
 	 * 
Index: content/content-api/api/src/java/org/sakaiproject/content/cover/ContentHostingService.java
===================================================================
--- content/content-api/api/src/java/org/sakaiproject/content/cover/ContentHostingService.java	(revision 35753)
+++ content/content-api/api/src/java/org/sakaiproject/content/cover/ContentHostingService.java	(revision 35755)
@@ -820,14 +820,6 @@
 
 		return service.findResources(type, primaryMimeType, subMimeType);
 	}
-
-	public static java.util.List findResources(String type, String primaryMimeType, String subMimeType, boolean accessableOnly)
-	{
-	   org.sakaiproject.content.api.ContentHostingService service = getInstance();
-      if (service == null) return null;
-
-      return service.findResources(type, primaryMimeType, subMimeType, accessableOnly);
-	}
   
 	public static java.util.Map getCollectionMap()
 	{
Index: content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java
===================================================================
--- content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java	(revision 35753)
+++ content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java	(revision 35755)
@@ -8265,39 +8265,19 @@
 	 */
 	public List findResources(String type, String primaryMimeType, String subMimeType)
 	{
-		return findResources(type, primaryMimeType, subMimeType, true);
-	}
-	
-	/**
-    * {@inheritDoc}
-    */
-   public List findResources(String type, String primaryMimeType, String subMimeType, boolean findAccessableOnly) {
-	   List globalList = new ArrayList();
-	   List<String> collectionList = new ArrayList<String>();
+		List globalList = new ArrayList();
 
-	   if (findAccessableOnly) {
-         Map othersites = getCollectionMap();
-         Iterator siteIt = othersites.keySet().iterator();
-         while (siteIt.hasNext())
-         {
-            String collId = (String) siteIt.next();
-            //String displayName = (String) othersites.get(collId);
-            collectionList.add(collId);
-            
-         }
-	   }
-	   else {
-	      // This will find all, not just the sites we have access to
-	      collectionList.add("/");
-	   }
-      
-      for (Iterator<String> iter = collectionList.iterator(); iter.hasNext();) {
-         String collectionId = iter.next();
-         List artifacts = getFlatResources(collectionId);
-         globalList.addAll(filterArtifacts(artifacts, type, primaryMimeType, subMimeType, true));
-      }
+		Map othersites = getCollectionMap();
+		Iterator siteIt = othersites.keySet().iterator();
+		while (siteIt.hasNext())
+		{
+			String collId = (String) siteIt.next();
+			String displayName = (String) othersites.get(collId);
+			List artifacts = getFlatResources(collId);
+			globalList.addAll(filterArtifacts(artifacts, type, primaryMimeType, subMimeType, true));
+		}
 
-      return globalList;
+		return globalList;
 	}
 
 	/**
Index: metaobj/metaobj-impl/api-impl/src/java/org/sakaiproject/metaobj/shared/mgt/impl/StructuredArtifactFinder.java
===================================================================
--- metaobj/metaobj-impl/api-impl/src/java/org/sakaiproject/metaobj/shared/mgt/impl/StructuredArtifactFinder.java	(revision 35753)
+++ metaobj/metaobj-impl/api-impl/src/java/org/sakaiproject/metaobj/shared/mgt/impl/StructuredArtifactFinder.java	(revision 35755)
@@ -24,13 +24,11 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
-import java.util.List;
 
-import org.sakaiproject.content.api.ContentHostingService;
+import org.sakaiproject.authz.cover.SecurityService;
 import org.sakaiproject.content.api.ContentResource;
+import org.sakaiproject.content.api.ResourceType;
 import org.sakaiproject.entity.api.ResourceProperties;
-import org.sakaiproject.metaobj.shared.mgt.AgentManager;
-import org.sakaiproject.metaobj.shared.mgt.IdManager;
 import org.sakaiproject.metaobj.shared.mgt.HomeFactory;
 import org.sakaiproject.metaobj.shared.mgt.home.StructuredArtifactHomeInterface;
 import org.sakaiproject.metaobj.shared.model.*;
@@ -65,17 +63,65 @@
    }
 
    public Collection findByType(String type) {
-      List artifacts = getContentHostingService().findResources(type,
-            null, null, false);
+      Collection<ContentResource> filteredArtifacts = new ArrayList<ContentResource>();
+      int page = 0;
+      Collection<ContentResource> rawResources = getContentHostingService().getResourcesOfType(
+            ResourceType.TYPE_METAOBJ, getFinderPageSize(), page);
+      while (rawResources != null && rawResources.size() > 0) {
+         
+         filteredArtifacts.addAll(filterArtifacts(rawResources, type, true));
+         page++;
+         rawResources = getContentHostingService().getResourcesOfType(
+               ResourceType.TYPE_METAOBJ, getFinderPageSize(), page);
+      }
+      
+      //List artifacts = getContentHostingService().findResources(type,
+      //      null, null, false);
 
-      Collection returned = new ArrayList();
+      Collection<Artifact> returned = new ArrayList<Artifact>();
 
-      for (Iterator i = artifacts.iterator(); i.hasNext();) {
+      for (Iterator<ContentResource> i = filteredArtifacts.iterator(); i.hasNext();) {
          ContentResource resource = (ContentResource) i.next();
          returned.add(createArtifact(resource));
       }
 
       return returned;
    }
+   
+   protected Collection filterArtifacts(Collection artifacts, String type, boolean checkPerms)
+   {
+      for (Iterator i = artifacts.iterator(); i.hasNext();)
+      {
+         ContentResource resource = (ContentResource) i.next();
+         //check for read permissions...
+         if (!checkPerms || SecurityService.unlock("content.read", resource.getId())) 
+         {
+            String currentType = resource.getProperties().getProperty(ResourceProperties.PROP_STRUCTOBJ_TYPE);
+            //String mimeType = resource.getProperties().getProperty(ResourceProperties.PROP_CONTENT_TYPE);
+   
+            if (type != null && !type.equals(ResourceProperties.FILE_TYPE))
+            {
+               // process StructuredObject type
+               if (currentType == null)
+               {
+                  i.remove();
+               }
+               else if (!currentType.equals(type))
+               {
+                  i.remove();
+               }
+            }
+            else 
+            {
+               // this one is a structured object, get rid of it
+               i.remove();
+            }
+         }
+         else {
+            i.remove();
+         }
+      }
+      return artifacts;
+   }
 
 }
Index: metaobj/metaobj-impl/api-impl/src/java/org/sakaiproject/metaobj/shared/mgt/impl/WrappedStructuredArtifactFinder.java
===================================================================
--- metaobj/metaobj-impl/api-impl/src/java/org/sakaiproject/metaobj/shared/mgt/impl/WrappedStructuredArtifactFinder.java	(revision 35753)
+++ metaobj/metaobj-impl/api-impl/src/java/org/sakaiproject/metaobj/shared/mgt/impl/WrappedStructuredArtifactFinder.java	(revision 35755)
@@ -48,6 +48,7 @@
    private ContentHostingService contentHostingService;
    private AgentManager agentManager;
    private IdManager idManager;
+   private int finderPageSize = 1000;
 
    public Collection findByOwnerAndType(Id owner, String type) {
       List artifacts = getContentHostingService().findResources(type,
@@ -116,4 +117,18 @@
    public void setIdManager(IdManager idManager) {
       this.idManager = idManager;
    }
+
+   /**
+    * @return the finderPageSize
+    */
+   public int getFinderPageSize() {
+      return finderPageSize;
+   }
+
+   /**
+    * @param finderPageSize the finderPageSize to set
+    */
+   public void setFinderPageSize(int finderPageSize) {
+      this.finderPageSize = finderPageSize;
+   }
 }
