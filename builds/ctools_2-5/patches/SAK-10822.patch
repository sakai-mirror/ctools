Index: dav/dav/src/java/org/sakaiproject/dav/DavServlet.java
===================================================================
--- dav/dav/src/java/org/sakaiproject/dav/DavServlet.java	(revision 31655)
+++ dav/dav/src/java/org/sakaiproject/dav/DavServlet.java	(working copy)
@@ -257,6 +257,11 @@
 
 	/** delimiter for form multiple values */
 	static final String FORM_VALUE_DELIMETER = "^";
+	
+	/**
+	 * Size of buffer for streaming downloads 
+	 */
+	protected static final int STREAM_BUFFER_SIZE = 102400;
 
 	/** used to id a log message */
 	public static String ME = DavServlet.class.getName();
@@ -1700,30 +1705,44 @@
 		if (!isCollection)
 		{
 			if (M_log.isDebugEnabled()) M_log.debug("SAKAIAccess doContent is resource " + id);
+			
+			InputStream contentStream = null;
+			
 			try
 			{
 				ContentResource resource = ContentHostingService.getResource(adjustId(id));
 				long len = resource.getContentLength();
 				String contentType = resource.getContentType();
-				byte[] content = resource.getContent();
-
-				if (content == null)
-				{
-					return "Empty resource";
-				}
-
 				// for URL content type, encode a redirect to the body URL
 				if (contentType.equalsIgnoreCase(ResourceProperties.TYPE_URL))
 				{
-					res.sendRedirect(new String(content));
+					res.sendRedirect(new String(resource.getContent()));
 				}
 				else
 				{
+					
+					contentStream = resource.streamContent();
+
+					if (contentStream == null || len == 0)
+					{
+						return "Empty resource";
+					}
 					if (!processHead(req, res)) return "Error setting header values";
+
 					OutputStream out = res.getOutputStream();
 					// now set in processHead
 					// res.setContentType(contentType);
-					out.write(content);
+					
+					//chunk content stream to response
+					int byteCount = 0;
+					byte[] chunk = new byte[STREAM_BUFFER_SIZE];
+					int lenRead;
+					while ((lenRead = contentStream.read(chunk)) != -1)
+					{
+						out.write(chunk, 0, lenRead);
+						byteCount += lenRead;
+					}
+					contentStream.close();
 					out.flush();
 				}
 			}
@@ -1732,6 +1751,17 @@
 				// M_log.warn(this + ".doContent(): exception: id: " + id + " : " + e.toString());
 				return e.toString();
 			}
+			finally
+			{
+				try{
+					if(contentStream != null){
+						contentStream.close();
+					}
+				}
+				catch (Throwable e){
+					return e.toString();
+				}
+			}
 		}
 
 		// for collections
