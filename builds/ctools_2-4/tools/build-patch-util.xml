<project name="build-patch-util2" basedir="." default="info" >
  <!--
   $Id$
   $HeadURL$
   
   Apply patches to the code.  Note that the code has been exported, so that need to apply patch files.
  -->

  <target name="applyPatchesInfo">
    <echo>
      Ant utility targets for applying patches to source code.  To use include this in the master build file.  Override the 
      applyPatches target to specify which files to patch.
      The only target is: testOnePatch.  The file to apply is specified via the command line property patchFileName.  That file
      should be in the same patches directory as any other patches to be applied.
      A sample command invocation would be:
      "ant -s build.xml testOnePatch -DpatchFileName=testPatch.patch".
    </echo>
  </target>

  <!-- Target to apply a single patch.  Used to test patches.  -->
  <target name="testOnePatch" description="target to test single patch application">
    <applyPatch patchFileName="${patchFileName}" />
  </target>

  <!--      ~/dev/ctools/trunk/builds/ctools_2-4/tools2/applyPatches.pl ~/dev/ctools/trunk/builds/ctools_2-4/patches/SPEED.patch ./log .  -->
  <!-- Macro definition to invoke the patch utility -->
  <macrodef name="applyPatch">
    <attribute name="patchFileName" />
    <sequential>
    <echo> applying patch @{patchFileName}</echo>
    <echo file="${logs.dir}/${ant.project.name}.patches.log" append="true" >
     ********************************************************** 
     applying patch @{patchFileName} 
     ********************************************************** 
    </echo>
    <exec executable="perl"
	  dir="${build.dir}"
	  failonerror="true"
	  output="${logs.dir}/${ant.project.name}.patches.log"
	  append="true">
      <arg value="${scripts.dir}/applyPatches.pl" />
      <arg value="${patches.dir}/@{patchFileName}" />
      <arg value="${logs.dir}/${ant.project.name}.patches.log" />
      <arg value="${build.dir}" />
    </exec>
    </sequential>
  </macrodef>

</project>
