svn diff -r31683:31684 https://source.sakaiproject.org/svn
Index: content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java
===================================================================
--- content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java	(revision 31683)
+++ content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java	(revision 31684)
@@ -9673,7 +9673,17 @@
 
 		public int getMemberCount() 
 		{
-			int count = m_storage.getMemberCount(this.m_id);
+			int count = 0;
+			Integer countObj = (Integer) ThreadLocalManager.get("getMemberCount@" + this.m_id);
+			if(countObj == null)
+			{
+				count = m_storage.getMemberCount(this.m_id);
+				ThreadLocalManager.set("getMemberCount@" + this.m_id, new Integer(count));
+			}
+			else
+			{
+				count = countObj.intValue();
+			}
 			return count;
 		}
 
svn diff -r31684:31685 https://source.sakaiproject.org/svn
Index: content/content-impl/impl/src/java/org/sakaiproject/content/impl/DbContentService.java
===================================================================
--- content/content-impl/impl/src/java/org/sakaiproject/content/impl/DbContentService.java	(revision 31684)
+++ content/content-impl/impl/src/java/org/sakaiproject/content/impl/DbContentService.java	(revision 31685)
@@ -60,6 +60,7 @@
 import org.sakaiproject.exception.ServerOverloadException;
 import org.sakaiproject.exception.TypeException;
 import org.sakaiproject.id.api.IdManager;
+import org.sakaiproject.thread_local.cover.ThreadLocalManager;
 import org.sakaiproject.time.api.Time;
 import org.sakaiproject.time.cover.TimeService;
 import org.sakaiproject.util.BaseDbSingleStorage;
@@ -694,11 +695,18 @@
 					 * // read all the records, then filter them to accept only those in this collection // Note: this is not desirable, as the read is linear to the database site -ggolden List rv = m_collectionStore.getSelectedResources( new Filter() {
 					 * public boolean accept(Object o) { // o is a String, the collection id return StringUtil.referencePath((String) o).equals(target); } } );
 					 */
-
+					
+					List collections = (List) ThreadLocalManager.get("getCollections@" + target);
+					if(collections == null)
+					{
+						collections = m_collectionStore.getAllResourcesWhere("IN_COLLECTION", target);
+						ThreadLocalManager.set("getCollections@" + target, collections);
+						cacheEntities(collections);
+					}
 					// read the records with a where clause to let the database
 					// select
 					// those in this collection
-					return m_collectionStore.getAllResourcesWhere("IN_COLLECTION", target);
+					return collections;
 				}
 			}
 			finally
@@ -915,10 +923,17 @@
 					 * public boolean accept(Object o) { // o is a String, the resource id return StringUtil.referencePath((String) o).equals(target); } } );
 					 */
 
+					List resources = (List) ThreadLocalManager.get("getResources@" + target);
+					if(resources == null)
+					{
+						resources = m_resourceStore.getAllResourcesWhere("IN_COLLECTION", target);
+						ThreadLocalManager.set("getResources@" + target, resources);
+						cacheEntities(resources);
+					}
 					// read the records with a where clause to let the database
 					// select
 					// those in this collection
-					return m_resourceStore.getAllResourcesWhere("IN_COLLECTION", target);
+					return resources;
 				}
 			}
 			finally
Index: content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java
===================================================================
--- content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java	(revision 31684)
+++ content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java	(revision 31685)
@@ -2354,6 +2354,27 @@
 		}
 	}
 
+	protected void cacheEntities(List entities)
+    {
+		if(entities == null)
+		{
+			return;
+		}
+		
+		for(ContentEntity entity : (List<ContentEntity>) entities)
+		{
+			String ref = entity.getReference();
+			if(entity instanceof ContentResource)
+			{
+				ThreadLocalManager.set("findResource@" + ref, entity);
+			}
+			else if(entity instanceof ContentCollection)
+			{
+				ThreadLocalManager.set("findCollection@" + ref, entity);
+			}
+		}
+    }
+
 	/**********************************************************************************************************************************************************************************************************************************************************
 	 * Resources
 	 *********************************************************************************************************************************************************************************************************************************************************/
@@ -9331,27 +9352,6 @@
 
 		} // getMemberResources
 
-		protected void cacheEntities(List entities)
-        {
-			if(entities == null)
-			{
-				return;
-			}
-			
-			for(ContentEntity entity : (List<ContentEntity>) entities)
-			{
-				String ref = entity.getReference();
-				if(entity instanceof ContentResource)
-				{
-					ThreadLocalManager.set("findResource@" + ref, entity);
-				}
-				else if(entity instanceof ContentCollection)
-				{
-					ThreadLocalManager.set("findCollection@" + ref, entity);
-				}
-			}
-        }
-
 		protected List copyEntityList(List entities)
         {
 			List list = new Vector();
