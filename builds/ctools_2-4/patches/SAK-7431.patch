svn diff -r19672:19673 https://source.sakaiproject.org/svn
Index: content/content-api/api/src/java/org/sakaiproject/content/api/ContentCollection.java
===================================================================
--- content/content-api/api/src/java/org/sakaiproject/content/api/ContentCollection.java	(revision 19672)
+++ content/content-api/api/src/java/org/sakaiproject/content/api/ContentCollection.java	(revision 19673)
@@ -57,6 +57,14 @@
 	public long getBodySizeK();
 	
 	/**
+	 * Access a count of the number of members (resources and collections) within this
+	 * collection.  This count is not recursive.  Only items whose immediate parent is
+	 * the current collection are counted.
+	 * @return
+	 */
+	public int getMemberCount();
+	
+	/**
 	 * Access the release date before which this entity should not be available to users 
 	 * except those with adequate permission (what defines "adequate permission" is TBD).
 	 * @return The date/time at which the entity may be accessed by all users.
Index: content/content-tool/tool/src/java/org/sakaiproject/content/tool/ResourcesAction.java
===================================================================
--- content/content-tool/tool/src/java/org/sakaiproject/content/tool/ResourcesAction.java	(revision 19672)
+++ content/content-tool/tool/src/java/org/sakaiproject/content/tool/ResourcesAction.java	(revision 19673)
@@ -11239,11 +11239,8 @@
 			String url = contentService.getUrl(collectionId);
 			folder.setUrl(url);
 			
-			// Get the collection members from the 'new' collection
-			List newMembers = collection.getMemberResources ();
-			
 			// get the "size' of the collection, meaning the number of members one level down
-			int collection_size = newMembers.size();
+			int collection_size = collection.getMemberCount(); // newMembers.size();
 			folder.setIsEmpty(collection_size < 1);
 			folder.setSortable(ContentHostingService.isSortByPriorityEnabled() && collection_size > 1 && collection_size < EXPANDABLE_FOLDER_SIZE_LIMIT);
 			folder.setIsTooBig(collection_size > EXPANDABLE_FOLDER_SIZE_LIMIT);
@@ -11251,8 +11248,11 @@
 			folder.setDepth(depth);
 			newItems.add(folder);
 
-			if(need_to_expand_all || expandedFolderSortMap.keySet().contains(collectionId))
+			if(!folder.isTooBig() && !folder.isEmpty() && (need_to_expand_all || expandedFolderSortMap.keySet().contains(collectionId)))
 			{
+				// Get the collection members from the 'new' collection
+				List newMembers = collection.getMemberResources();
+				
 				Comparator comparator = userSelectedSort;
 				if(comparator == null)
 				{
Index: content/content-impl/impl/src/java/org/sakaiproject/content/impl/DbContentService.java
===================================================================
--- content/content-impl/impl/src/java/org/sakaiproject/content/impl/DbContentService.java	(revision 19672)
+++ content/content-impl/impl/src/java/org/sakaiproject/content/impl/DbContentService.java	(revision 19673)
@@ -994,6 +994,29 @@
 			}
 		}
 
+		public int getMemberCount(String collectionId) 
+		{
+			int fileCount = 0;
+			try 
+			{
+				fileCount = countQuery("select count(IN_COLLECTION) from CONTENT_RESOURCE where IN_COLLECTION = ?", collectionId);
+			} 
+			catch (IdUnusedException e) 
+			{
+				// ignore -- means this is not a collection or the collection contains no files, so zero is right answer
+			}
+			int folderCount = 0;
+			try 
+			{
+				folderCount = countQuery("select count(IN_COLLECTION) from CONTENT_COLLECTION where IN_COLLECTION = ?", collectionId);
+			} 
+			catch (IdUnusedException e) 
+			{
+				// ignore -- means this is not a collection or the collection contains no folders, so zero is right answer
+			};
+			return fileCount + folderCount;
+		}
+
 	} // DbStorage
 
 	/**
Index: content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java
===================================================================
--- content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java	(revision 19672)
+++ content/content-impl/impl/src/java/org/sakaiproject/content/impl/BaseContentService.java	(revision 19673)
@@ -9065,6 +9065,12 @@
 			}
 		}
 
+		public int getMemberCount() 
+		{
+			int count = m_storage.getMemberCount(this.m_id);
+			return count;
+		}
+
 	} // class BaseCollection
 
 	/**********************************************************************************************************************************************************************************************************************************************************
@@ -9723,6 +9729,14 @@
 		public void open();
 
 		/**
+		 * Get a count of all members of a collection, where 'member' means the collection
+		 * is the immediate parent of the item.  The count is not recursive and it will 
+		 * include all resources and collections whose immediate parent is the collection
+		 * identified by the parameter.
+		 */
+		public int getMemberCount(String collectionId);
+
+		/**
 		 * Close.
 		 */
 		public void close();
