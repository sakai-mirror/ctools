Index: /Users/dlhaines/dev/sakai/resources/sakai_2-3-0/content/content-tool/tool/src/java/org/sakaiproject/content/tool/ResourcesAction.java
===================================================================
--- /Users/dlhaines/dev/sakai/resources/sakai_2-3-0/content/content-tool/tool/src/java/org/sakaiproject/content/tool/ResourcesAction.java	(revision 17928)
+++ /Users/dlhaines/dev/sakai/resources/sakai_2-3-0/content/content-tool/tool/src/java/org/sakaiproject/content/tool/ResourcesAction.java	(working copy)
@@ -10536,7 +10536,21 @@
 			folder.setUrl(url);
 			
 			// Get the collection members from the 'new' collection
-			List newMembers = collection.getMemberResources ();
+			//			List newMembers = collection.getMemberResources ();
+
+			// Add regex filtering so that won't expand folders
+			// that are fobidden.
+			
+			// original
+			// List newMembers = collection.getMemberResources ();
+			String opaqueFoldersRE = "^/attachment/";
+			// String opaqueFoldersRE = "";
+			List newMembers = null;
+			// This construction is safe since it won't do the call to 'matches' unless
+			// opaqueFolders exists.
+			newMembers = newMembersList(collection, opaqueFoldersRE);
+			
+
 			
 			// get the "size' of the collection, meaning the number of members one level down
 			int collection_size = newMembers.size();
@@ -10764,6 +10778,30 @@
 
 	}	// getBrowseItems
 
+	/**
+	 * Return the use of members of this collection.  If the collectionId matches 
+	 * a list of 'opaqueFolders' then the list returned will be empty regardless of
+	 * the actually contents.  This is to allow blocking access to collections that 
+	 * shouldn't explictly be viewed.  E.g. the list of all attachments for the entire system.
+	 * 
+	 * @param collection
+	 * @param opaqueFolders
+	 * @return
+	 */
+	
+	protected static List newMembersList(ContentCollection collection, String opaqueFoldersRE) {
+		List newMembers;		
+		if (opaqueFoldersRE == null || !Pattern.matches(opaqueFoldersRE,collection.getId())) {
+			newMembers = collection.getMemberResources();
+		}
+		else {
+			newMembers = new LinkedList(); 
+		}
+		return newMembers;
+	}
+	
+
+
 	protected static boolean checkItemFilter(ContentResource resource, BrowseItem newItem, SessionState state) 
 	{
 		ContentResourceFilter filter = (ContentResourceFilter)state.getAttribute(STATE_ATTACH_FILTER);
