<project name="build-utils" basedir="." default="info" >

  <!--

$Id: build.xml 5796 2006-02-06 19:03:57Z dlhaines@umich.edu $
$HeadURL: https://source.sakaiproject.org/svn/branches/ctools-winter-06/tools/build.xml $


  Utility ant targets to help build the build scripts.

 Ant script that will extract and configure sakai and ctools.
 This will call subscripts to build parts

 This will extract source, customize it, compile, create image.

  -->

  <!-- 
       TTD:
  -->

  <!--
  <property name="config-file" value="" />
  <property file="${config-file}" />
  <property name="build.dir" value="./build" />
  <property name="logs.dir" value="./logs" />
  <property name="image.dir" value="./image" />
  <property name="image.dest.dir" value="." />
  <property name="svnCmd" value="export" />
  <property name="defaultRevision" value="HEAD" />
-->
  <target name="info">
    <echo>

      provide utility targets for building a ctools image.

    macro tasks:
    place - move contents of a directory to another one.  This
    is useful since SVN will extract resources but will not
    allow changing the parent directory.  E.g. if you want to
    extract the sakai_2-1 release the contents will be put in
    the sakai_2-1 directory even if you want it in the
    "./build" directory.  This allows moving the contents of an
    extracted directory to another directory.  That directory
    defaults to the ${build.dir} directory.  
    
    </echo>
  </target>


  
  <!-- utility targets -->
  <target name="prepare" depends="prepareBuildDirs" >
  </target>

  <!-- utility -->

<!--
  <target name="prepareBuildDirs"
	  description="clean all the directories needed for a build." >
    <delete dir="${build.dir}" />
    <mkdir dir="${build.dir}" />
    <delete dir="${logs.dir}" />
    <mkdir dir="${logs.dir}" />
    <delete dir="${image.dir}" />
    <mkdir dir="${image.dir}" />
  </target>
-->

  <!-- ================================================== -->
  <!--             extract the source and compile it.     -->
  <!-- ================================================== -->

  <!-- ================================================== -->
  <!--               deal with Sakai proper               -->
  <!-- ================================================== -->
<!--
  <target name="getSakaiSrc" depends="prepareBuildDirs">
    <execSvnCmd url="${sakai.svnurl}" revision="${sakai.revision}"/>
    <place fromdir="${build.dir}/${sakai.svndir}" />
    <antcall target="removeUnneededSakai" />
  </target>
-->
  <target name="editMaster">
    <echo>change version in the ${build.dir}/master/project.properties file to ${sakai.tag}.</echo>
    <replaceregexp file="${build.dir}/master/project.properties" >
      <regexp pattern="sakai\.version=.*" />
      <substitution 
	  expression="sakai.version=${sakai.tag}" />
    </replaceregexp>
  </target>
<!--

  <target name="compileSakai" depends="editMaster">
    <exec executable="maven"
	  dir="${build.dir}"
	  failonerror="true"
	  searchpath="true"
	  >
      <arg value="-b" />
      <arg value="-o" />
      <arg value="sakai:clean" />
      <arg value="sakai:build" />
      <arg value="sakai:deploy-zip" />
    </exec>
  </target>

-->
  <!-- =============================== -->
  <!--         image targets           -->
  <!-- =============================== -->
<!--
  <target name="buildImage">
    <mkdir dir="${image.dir}" />
    <untar src="${build.dir}/sakai.tar.gz" dest="${image.dir}" compression="gzip" />
    <copy file="${dbdriver}" todir="${image.dir}/common/lib" />
    <antcall target="imageMelete" />
    <delete dir="${image.dir}/licenses" />
    <tar basedir="${image.dir}" 
	 compression="gzip" longfile="warn"
	 destfile="${image.dest.dir}/image.${sakai.tag}.tar.gz"
	 />
    <!\-\-
	This will create a zip archive, if you want one.
	<zip basedir="${image.dir}"
	destfile="${image.dest.dir}/image.${sakai.tag}.zip"
	/>
    \-\->

    <echo>
      Remember to setup the sakai directory and change the revision number for the footer.
    </echo>

  </target>
-->  
  <!--
      to uncompress a tar file into an existing tomcat directory you can use something like:
      tar \-\-gunzip -f sakai_2-1_4840.tar.gz -C ~/tomcats/image-test -x
      where the value following the -C is the destination directory.
  -->

  <!-- ========================================= -->
  <!--             macro definitions             -->
  <!-- ========================================= -->

  <!-- run a svn command.  
       
       This wraps the execution of specific svn commands.  It supplies default
       values for the cmd, svn url, output (build) directory, the directory to
       contain the log file, and the svn revision to use.
       
       The commands likely to be useful are: ls, co (checkout), and export (get files
       without svn information, useful for compilation).
       
       example:  <execSvnCmd url="${ctools.svnurl}"  /> 
       example:  <execSvnCmd url="${ctools.svnurl}" revision="4444" /> 

This is a macro to support default values and to hide
the svn specific syntax.
  -->

  <macrodef name="execSvnCmd">
    <attribute name="cmd" default="${svnCmd}" />
    <attribute name="url" default="${sakai.svnurl}" />
    <attribute name="dir" default="${build.dir}" />
    <attribute name="logdir" default="${logs.dir}" />
    <attribute name="revision" default="${defaultRevision}" />
    <sequential>
      <echo>Extract svn resource: @{cmd} from @{url} revision: @{revision}.</echo>
      <exec executable="svn"
	    dir="@{dir}"
	    failonerror="true"
	    output="@{logdir}/${ant.project.name}.log"
	    append="true" >
	<arg value="-r@{revision}" />
	<arg value="@{cmd}" />
	<arg value="@{url}" />
      </exec>
    </sequential>
  </macrodef>

  <!-- remove files from build directory -->
  <macrodef name="removeFromBuild">
    <attribute name="dir" default="${build.dir}" />
    <attribute name="deleteDir" />
    <sequential>
      <delete dir="${build.dir}/@{deleteDir}"  verbose="false" quiet="true" />
    </sequential>
  </macrodef>

  <!-- Take files from one directory and put in another.  It is necessary
       since a svn export or checkout will extract the directory specified,
       but you often want the resources in the directory, not the directory
       itself.  This is particularly an issue when you need to merge 
       different resources.  E.g. the sakai_2-1 release with the
       ctools specific tools.
       
       This is a macro to support default values.
       
       example:     <place fromdir="${build.dir}/sakai_2-1" />
  -->

  <target name="testPlace">
    <place fromdir="${build.dir}/ctools" />
  </target>

  <macrodef name="placeUnixBroken" >
    <attribute name="todir" default="${build.dir}" />
    <attribute name="fromdir" />
    <attribute name="verbose" default="no" />
    <attribute name="logdir" default="." />

    <sequential>
      <echo> new: place files from @{fromdir} in @{todir}</echo>
      <exec executable="/bin/bash"
	    dir="${basedir}/@{fromdir}"
	    failonerror="true"
	    output="@{logdir}/${ant.project.name}.log"
	    append="true" 
	    searchpath="true" 
	    >
	<arg value="-c" />
	<arg value="mv -a . ${basedir}/@{todir}" />
      </exec>

    </sequential>
  </macrodef>

  <macrodef name="place">
    <attribute name="todir" default="${build.dir}" />
    <attribute name="fromdir" />
    <attribute name="verbose" default="no" />

    <sequential>
      <echo> place files from @{fromdir} in @{todir}</echo>
      <move todir="@{todir}" verbose="@{verbose}" includeEmptyDirs="yes">
	<fileset dir="@{fromdir}" defaultexcludes="no" />
	<!-- 
	     <fileset dir="@{fromdir}" >
	     <or>
	     <type type="dir" />
	     <type type="file" />
	     </or>
	     </fileset>
	-->
      </move>
    </sequential>

  </macrodef>


  <!-- utility -->

  <target name="prepareBuildDirs"
	  description="clean all the directories needed for a build." >
    <delete dir="${build.dir}" />
    <mkdir dir="${build.dir}" />
    <delete dir="${logs.dir}" />
    <mkdir dir="${logs.dir}" />
    <delete dir="${image.dir}" />
    <mkdir dir="${image.dir}" />
  </target>

  

</project>
