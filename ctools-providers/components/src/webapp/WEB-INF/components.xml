<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

	<!--  Umiac split into 2 parts , the connector and the client -->
 <bean id="org.sakaiproject.util.api.umiac.UmiacConnector"
	class="org.sakaiproject.util.impl.umiac.UmiacConnectorImpl"
	init-method="init"
	destroy-method="destroy"
	singleton="true">
	<property name="serverConfigurationService"><ref bean="org.sakaiproject.component.api.ServerConfigurationService"/></property> 
  </bean>

  <bean id="org.sakaiproject.util.api.umiac.UmiacClient"
	class="org.sakaiproject.util.impl.umiac.UmiacClientImpl"
	init-method="init"
	destroy-method="destroy"
	singleton="true">
	 <!--  <lookup-method name="memoryService" bean="org.sakaiproject.memory.api.MemoryService" /> -->
	<property name="memoryService"><ref bean="org.sakaiproject.memory.api.MemoryService"/></property>
   <property name="umiacConnector"><ref bean="org.sakaiproject.util.api.umiac.UmiacConnector"/></property> 
  </bean>
  
  <bean id="org.sakaiproject.user.api.UserDirectoryProvider"
	class="org.sakaiproject.provider.user.UnivOfMichUserDirectoryProvider"
	init-method="init"
	destroy-method="destroy"
	singleton="true">
    <property name="serverConfigurationService"><ref bean="org.sakaiproject.component.api.ServerConfigurationService"/></property> 
    <property name="method"><value>cosign</value></property>
    <property name="umiac"><ref bean="org.sakaiproject.util.api.umiac.UmiacClient"/></property>
    
  </bean>

  <bean id="org.sakaiproject.authz.api.GroupProvider"
	class="org.sakaiproject.component.legacy.realm.UnivOfMichRealmProvider"
	init-method="init"
	destroy-method="destroy"
	singleton="true">
    <property name="umiac"><ref bean="org.sakaiproject.util.api.umiac.UmiacClient"/></property>
  </bean>
  
  
  <bean id="org.sakaiproject.coursemanagement.api.CourseManagementService" 
  	class="org.sakaiproject.coursemanagement.impl.CourseManagementServiceUnivOfMichImpl" 
		init-method="init" 
  		destroy-method="destroy">
    <property name="umiac"><ref bean="org.sakaiproject.util.api.umiac.UmiacClient"/></property>
    <property name="sqlService"><ref bean="org.sakaiproject.db.api.SqlService"/></property>
  </bean>

  <bean id="eventwatcher"
	class="org.sakaiproject.eventwatcher.EventWatcher"
	init-method="init"
	destroy-method="destroy"
	singleton="true">
    <!--		<property name="eventTrackingService"><ref bean="org.sakaiproject.service.legacy.event.EventTrackingService"/></property> -->
    <property name="eventTrackingService"><ref bean="org.sakaiproject.event.api.EventTrackingService"/></property>
    <property name="umiac"><ref bean="org.sakaiproject.util.api.umiac.UmiacClient"/></property>
  </bean>

  <!-- add for the local provider implementation of section field manager -->
  <!-- NOTE that other implementations of the SectionFieldProvider must be deleted. -->
  <bean id="org.sakaiproject.sitemanage.api.SectionFieldProvider"
	class="org.sakaiproject.sitemanage.impl.SectionFieldProviderUMichImpl"
	init-method="init"
	destroy-method="destroy"
	singleton="true">
	<property name="umiac"><ref bean="org.sakaiproject.util.api.umiac.UmiacClient"/></property>
	<property name="courseManagementService"><ref bean="org.sakaiproject.coursemanagement.api.CourseManagementService"/></property>
  </bean>
  
  	<!--  New in site-mangage in 2.5.
   		Our implmentation is null, but some implimentation is required since we 
  		delete all of site-manage. -->
  	
	<bean id="org.sakaiproject.sitemanage.api.AffiliatedSectionProvider"
			class="org.sakaiproject.sitemanage.impl.AffiliatedSectionProviderImpl"
			init-method="init"
			destroy-method="destroy"
			singleton="true">
	</bean>
  <!-- 
  This section illustrates how to use Spring AOP to trace calls to our provider.  A custom trace class may be more convenient
  in the longer run.
  1) change the id above of the real umiac bean.  In this case we append Target to the name (see target property below).
  2) configure a provided Spring trace interceptor
  3) setup a proxy class with the original umiac bean id.

  \<\!\-\- configure the Spring custom trace interceptor.  Note that logging level needs to be 
         debug or trace.

	<bean id="customizableTraceInterceptor"
		class="org.springframework.aop.interceptor.CustomizableTraceInterceptor" >
	  <property name="exitMessage">
	    <value>"umiac: $[targetClassShortName].$[methodName]: args: [$[arguments]] return: [$[returnValue]] ms:$[invocationTime]"</value>
	  </property>
	</bean>

	<!\-\- Proxy the Umiac class directly.  \-\->
	<bean id="org.sakaiproject.util.api.umiac.Umiac"
	      class="org.springframework.aop.framework.ProxyFactoryBean">
	  <property name="proxyTargetClass"><value>true</value></property>
	  <property name="target">
	    <ref local="org.sakaiproject.util.api.umiac.UmiacTarget" />
	  </property>
	  <property name="interceptorNames">
	    <list>
	      <value>customizableTraceInterceptor</value>
	    </list>
	  </property>
	</bean>
	-->
</beans>
